[{"/Users/camcgreen/Documents/web-dev/jobstasy/src/index.js":"1","/Users/camcgreen/Documents/web-dev/jobstasy/src/reportWebVitals.js":"2","/Users/camcgreen/Documents/web-dev/jobstasy/src/App.js":"3","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/LogIn.js":"4","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/ScrollToTop.js":"5","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SignUp.js":"6","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Likes.js":"7","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobDetail.js":"8","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Navbar.js":"9","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Footer.js":"10","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Jobs.js":"11","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Contact.js":"12","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobList.js":"13","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Filters.js":"14","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SearchField.js":"15","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobCard.js":"16","/Users/camcgreen/Documents/web-dev/jobstasy/src/utilities/helper.js":"17","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Pagination.js":"18"},{"size":1663,"mtime":1611185841409,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1610570519056,"results":"21","hashOfConfig":"20"},{"size":118,"mtime":1610570519050,"results":"22","hashOfConfig":"20"},{"size":4354,"mtime":1611185566882,"results":"23","hashOfConfig":"20"},{"size":380,"mtime":1610570519054,"results":"24","hashOfConfig":"20"},{"size":5024,"mtime":1611185558519,"results":"25","hashOfConfig":"20"},{"size":5258,"mtime":1611183545680,"results":"26","hashOfConfig":"20"},{"size":10767,"mtime":1611186286763,"results":"27","hashOfConfig":"20"},{"size":5498,"mtime":1611185253748,"results":"28","hashOfConfig":"20"},{"size":1671,"mtime":1611186393652,"results":"29","hashOfConfig":"20"},{"size":7549,"mtime":1611183533493,"results":"30","hashOfConfig":"20"},{"size":4673,"mtime":1611186190761,"results":"31","hashOfConfig":"20"},{"size":1469,"mtime":1611184905885,"results":"32","hashOfConfig":"20"},{"size":13568,"mtime":1611184160197,"results":"33","hashOfConfig":"20"},{"size":7764,"mtime":1611185739251,"results":"34","hashOfConfig":"20"},{"size":5785,"mtime":1611184476653,"results":"35","hashOfConfig":"20"},{"size":2829,"mtime":1611186401059,"results":"36","hashOfConfig":"20"},{"size":2067,"mtime":1611185398420,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ahqbd9",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},"/Users/camcgreen/Documents/web-dev/jobstasy/src/index.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/reportWebVitals.js",[],["81","82"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/App.js",["83"],"import logo from \"./logo.svg\";\n// import \"./App.css\";\n\nfunction App() {\n  return <h1>Hey</h1>;\n}\n\nexport default App;\n",["84","85"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/LogIn.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/ScrollToTop.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SignUp.js",["86"],"import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport { disableRightMiddleClick } from \"../utilities/helper\";\nimport \"./FormAuthentication.scss\";\nimport \"./main.scss\";\nconst firebase = require(\"firebase\");\n\nclass SignUp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: null,\n      password: null,\n      passwordConfirmation: null,\n      nickname: null,\n      signupError: \"\",\n    };\n  }\n  render() {\n    return (\n      <div className=\"bg-authentication\">\n        <div className=\"container-authentication\">\n          <Link to=\"/signup\">\n            <img\n              className=\"logo-text\"\n              src=\"https://svgshare.com/i/Sub.svg\"\n              alt=\"\"\n            />\n          </Link>\n          <form onSubmit={(e) => this.submitSignup(e)}>\n            <input\n              autoFocus\n              type=\"text\"\n              placeholder=\"Email\"\n              className=\"input input--email\"\n              onChange={(e) => this.userTyping(\"email\", e)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"input input--password\"\n              onChange={(e) => this.userTyping(\"password\", e)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              className=\"input input--password-confirmation\"\n              onChange={(e) => this.userTyping(\"passwordConfirmation\", e)}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Nickname\"\n              className=\"input input--nickname\"\n              onChange={(e) => this.userTyping(\"nickname\", e)}\n            />\n            <h4 className=\"error-text\">\n              {this.state.signupError ? this.state.signupError : null}\n            </h4>\n            <button type=\"submit\" className=\"btn btn--authentication\">\n              Sign up\n            </button>\n          </form>\n          <h5 className=\"h5-form\">\n            Already have an account? <Link to=\"/login\">Log in</Link>\n          </h5>\n        </div>\n      </div>\n    );\n  }\n  componentDidMount = () => {\n    disableRightMiddleClick();\n  };\n  checkNicknameValid = (nickname) => {\n    const regex = /^[a-zA-Z]+$/;\n    return regex.test(nickname);\n  };\n  formIsValid = () =>\n    this.state.password === this.state.passwordConfirmation &&\n    this.state.email !== null &&\n    this.state.password !== null &&\n    this.state.passwordConfirmation !== null &&\n    this.state.nickname !== null &&\n    this.checkNicknameValid(this.state.nickname);\n  userTyping = (type, e) => {\n    switch (type) {\n      case \"email\":\n        this.setState({ email: e.target.value });\n        break;\n      case \"password\":\n        this.setState({ password: e.target.value });\n        break;\n      case \"passwordConfirmation\":\n        this.setState({ passwordConfirmation: e.target.value });\n        break;\n      case \"nickname\":\n        this.setState({ nickname: e.target.value });\n        break;\n      default:\n        break;\n    }\n  };\n  submitSignup = (e) => {\n    e.preventDefault();\n    if (!this.formIsValid()) {\n      switch (true) {\n        case this.state.email === null:\n          this.setState({ signupError: \"You must enter an email address\" });\n          return;\n        case this.state.password === null:\n          this.setState({ signupError: \"You must enter a password\" });\n          return;\n        case this.state.password !== this.state.passwordConfirmation:\n          this.setState({ signupError: \"Passwords do not match\" });\n          return;\n        case this.state.nickname === null:\n          this.setState({ signupError: \"You must enter a nickname\" });\n          return;\n        case !this.checkNicknameValid(this.state.nickname):\n          this.setState({ signupError: \"Nickname must only include letters.\" });\n          return;\n      }\n      return;\n    }\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(\n        this.state.email.toLowerCase(),\n        this.state.password\n      )\n      .then(\n        (authRes) => {\n          const userObj = {\n            email: authRes.user.email,\n            nickname: this.state.nickname,\n          };\n          firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(this.state.email.toLowerCase())\n            .set(userObj)\n            .then(\n              async () => {\n                const likedJobs = [];\n                await firebase\n                  .firestore()\n                  .collection(\"jobs\")\n                  .doc(this.state.email)\n                  .set({\n                    likedJobs: [...likedJobs],\n                  });\n                this.props.history.push(\"/jobs\");\n              },\n              (dbError) => {\n                this.setState({ signupError: \"Failed to add user\" });\n              }\n            );\n        },\n        (authError) => {\n          this.setState({ signupError: authError.message });\n        }\n      );\n  };\n}\n\nexport default SignUp;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Likes.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobDetail.js",["87","88"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Navbar.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Footer.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Jobs.js",["89","90"],"import React from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./Navbar\";\nimport SearchField from \"./SearchField\";\nimport Filters from \"./Filters\";\nimport JobList from \"./JobList\";\nimport Pagination from \"./Pagination\";\nimport Contact from \"./Contact\";\nimport Footer from \"./Footer\";\nimport {\n  disableRightMiddleClick,\n  getRandom,\n  convertJobIdToSeed,\n  convertToSalary,\n  urlRegex,\n  sortJobs,\n  filterJobsByCompany,\n  filterJobsBySalary,\n  filterJobsByFullTime,\n} from \"../utilities/helper\";\nimport \"./main.scss\";\nimport \"./Jobs.scss\";\nconst firebase = require(\"firebase\");\n\nclass Jobs extends React.Component {\n  constructor() {\n    super();\n    this.scrollDiv = React.createRef();\n    this.state = {\n      email: \"\",\n      nickname: \"\",\n      loaded: false,\n      jobs: [],\n      description: \"\",\n      location: \"\",\n      sort: \"most recent\",\n      salaryValue: [0, 80000],\n      fullTimeOnly: false,\n      companyTags: [],\n      defaultJobs: [],\n      companyNames: [\n        { company: \"\", company_url: \"\" },\n        { company: \"\", company_url: \"\" },\n        { company: \"\", company_url: \"\" },\n      ],\n      searchedJobs: [],\n      currentPage: 1,\n      jobsPerPage: 10,\n      noJobsFound: false,\n    };\n  }\n  render() {\n    const indexOfLastJob = this.state.currentPage * this.state.jobsPerPage;\n    const indexOfFirstJob = indexOfLastJob - this.state.jobsPerPage;\n    const currentJobs = this.state.jobs.slice(indexOfFirstJob, indexOfLastJob);\n    return (\n      <>\n        <Navbar email={this.state.email} nickname={this.state.nickname} />\n        <SearchField\n          companyNames={this.state.companyNames}\n          updateSearchState={this.updateSearchState}\n        />\n        <div className=\"container\">\n          <div id=\"scroll-to\"></div>\n          <Filters\n            jobNumber={this.state.jobs.length}\n            updateFilterState={this.updateFilterState}\n            ref={this.scrollDiv}\n          />\n          <JobList\n            jobs={currentJobs}\n            noJobsFound={this.state.noJobsFound}\n            email={this.state.email}\n            nickname={this.state.nickname}\n            type={\"jobs\"}\n          />\n          {this.state.jobs.length > 0 && (\n            <Pagination\n              jobsPerPage={this.state.jobsPerPage}\n              totalJobs={this.state.jobs.length}\n              paginate={this.paginate}\n              currentPage={this.state.currentPage}\n            />\n          )}\n        </div>\n        <Contact />\n        <Footer email={this.state.email} nickname={this.state.nickname} />\n      </>\n    );\n  }\n  componentDidMount = async () => {\n    disableRightMiddleClick();\n    setTimeout(() => {\n      firebase.auth().onAuthStateChanged(async (_usr) => {\n        if (!_usr) {\n          this.props.history.push(\"/login\");\n        } else {\n          firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(_usr.email)\n            .get()\n            .then(async (doc) => {\n              const userData = doc.data();\n              await this.setState({\n                email: userData.email,\n                nickname: userData.nickname,\n              });\n            });\n        }\n      });\n    }, 270);\n    await this.getJobs();\n    const companyNames = this.checkCompanyUrlExists(this.state.jobs);\n    await this.setState({ companyNames });\n  };\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (\n      prevState.description !== this.state.description ||\n      prevState.location !== this.state.location ||\n      prevState.sort !== this.state.sort ||\n      JSON.stringify(prevState.salaryValue) !==\n        JSON.stringify(this.state.salaryValue) ||\n      prevState.fullTimeOnly !== this.state.fullTimeOnly ||\n      JSON.stringify(prevState.companyTags) !==\n        JSON.stringify(this.state.companyTags)\n    ) {\n      this.getJobs();\n    }\n    if (\n      (prevState.description !== this.state.description &&\n        this.state.description !== \"\") ||\n      (prevState.location !== this.state.location && this.state.location !== \"\")\n    ) {\n      document\n        .getElementById(\"search-field-inputs\")\n        .scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n  paginate = async (pageNumber) => {\n    await this.setState({ currentPage: pageNumber });\n    document\n      .getElementById(\"search-field-inputs\")\n      .scrollIntoView({ behavior: \"smooth\" });\n  };\n  updateSearchState = (searchState) => {\n    this.setState({ description: searchState[0], location: searchState[1] });\n  };\n  updateFilterState = (filterState) => {\n    this.setState({\n      sort: filterState[0],\n      salaryValue: [...filterState[1]],\n      fullTimeOnly: filterState[2],\n      companyTags: [...filterState[3]],\n    });\n  };\n  getJobs = async () => {\n    let jobs = [];\n    await this.setState({ jobs, noJobsFound: false });\n    try {\n      jobs = await axios(\n        `/positions.json?description=${this.state.description}&location=${this.state.location}`\n      );\n    } catch (err) {\n      jobs = [];\n      await this.setState({ jobs, noJobsFound: true });\n      return;\n    }\n    jobs = this.addAttributes(jobs.data);\n    jobs = this.applyFilters(jobs);\n\n    await this.setState({\n      currentPage: 1,\n      jobs,\n      noJobsFound: jobs.length > 0 ? false : true,\n    });\n  };\n  addAttributes = (jobs) => {\n    jobs = this.addSalary(jobs);\n    jobs = this.addApplicants(jobs);\n    return jobs;\n  };\n  generatePersistentSalary = (jobId) => {\n    const jobSeed = convertJobIdToSeed(jobId);\n    const random = getRandom(jobSeed);\n    return convertToSalary(random);\n  };\n  generatePersistentApplicantNumber = (jobId) => {\n    const jobSeed = convertJobIdToSeed(jobId);\n    const random = getRandom(jobSeed);\n    return Math.floor(4 + random * 58);\n  };\n  addSalary = (jobs) => {\n    jobs.forEach((job) => {\n      const min = this.generatePersistentSalary(job.id);\n      const max = min + 5000;\n      job.salary_min = min;\n      job.salary_max = max;\n    });\n    return jobs;\n  };\n  addApplicants = (jobs) => {\n    jobs.forEach((job) => {\n      job.applicant_number = this.generatePersistentApplicantNumber(job.id);\n    });\n    return jobs;\n  };\n  addApplyBefore = (jobs) => {\n    const monthInMs = 2629800000;\n    const applyInterval = monthInMs * 2.5;\n    jobs.forEach((job) => {\n      const createdDate = Date.parse(job.created_at);\n      const applyBeforeDate = new Date(createdDate + applyInterval);\n      job.apply_before = applyBeforeDate;\n    });\n    return jobs;\n  };\n  checkCompanyUrlExists = (jobs) => {\n    let result = [];\n    const regex = urlRegex;\n    jobs.forEach((job) => {\n      let companyAlreadyInList = false;\n      result.every((jobInList) => {\n        if (jobInList.company === job.company) {\n          companyAlreadyInList = true;\n          return;\n        }\n      });\n      if (\n        job.company_url !== null &&\n        regex.test(job.company_url) &&\n        !companyAlreadyInList &&\n        result.length < 3\n      ) {\n        result.push(job);\n      }\n    });\n    return result;\n  };\n  applyFilters = (jobs) => {\n    let filteredJobs = [...jobs];\n    filteredJobs = sortJobs(filteredJobs, this.state.sort);\n    if (this.state.companyTags.length > 0) {\n      filteredJobs = filterJobsByCompany(filteredJobs, this.state.companyTags);\n    }\n    filteredJobs = filterJobsBySalary(\n      filteredJobs,\n      this.state.salaryValue[0],\n      this.state.salaryValue[1]\n    );\n    filteredJobs = this.state.fullTimeOnly\n      ? filterJobsByFullTime(filteredJobs)\n      : filteredJobs;\n    return filteredJobs;\n  };\n}\n\nexport default Jobs;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Contact.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobList.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Filters.js",["91"],"import React from \"react\";\nimport \"./main.scss\";\nimport \"./Filters.scss\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst muiTheme = createMuiTheme({\n  overrides: {\n    MuiSlider: {\n      root: {\n        width: \"95%\",\n        display: \"flex\",\n        margin: \"0 auto\",\n      },\n      markLabel: {\n        marginTop: \"10px\",\n        marginRight: \"10px\",\n      },\n      thumb: {\n        color: \"white\",\n        border: \"solid #444cf4  1px\",\n        stroke: \"#444cf4\",\n        height: \"30px\",\n        width: \"30px\",\n        transform: \"translate(-10px, -10px)\",\n      },\n      track: {\n        color: \"#444cf4\",\n      },\n      rail: {\n        color: \"#444cf4\",\n      },\n    },\n  },\n});\n\nconst marks = [\n  {\n    value: 0,\n    label: \"£0\",\n  },\n  {\n    value: 80000,\n    label: \"£80k\",\n  },\n];\n\nclass Filters extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      filtersOpen: false,\n      inputSort: \"most recent\",\n      inputSalaryValue: [0, 80000],\n      inputCompanyTag: \"\",\n      inputFullTimeOnly: false,\n      companyTags: [],\n      jobs: [],\n      filteredJobs: [],\n    };\n  }\n  render() {\n    const slider = document.getElementById(\"slider\");\n    return (\n      <>\n        <div className=\"list-info\" style={{ marginTop: this.props.marginTop }}>\n          <div className=\"filter-container\">\n            <div\n              className=\"filter-container__filters\"\n              onClick={() => {\n                this.toggleFilters();\n                this.toggleNoScroll();\n              }}\n            >\n              {/* <img\n              className=\"filters__img\"\n              src=\"https://svgshare.com/i/SxK.svg\"\n              alt=\"filter\"\n            /> */}\n              <svg\n                width=\"16\"\n                height=\"16\"\n                viewBox=\"0 0 16 16\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <g clip-path=\"url(#clip0)\">\n                  <path\n                    d=\"M15.4055 0H0.65625C0.311035 0 0.03125 0.279785 0.03125 0.625C0.03125 2.36548 0.777344 4.0271 2.07825 5.18347L4.81543 7.61634C5.29004 8.03821 5.56226 8.64441 5.56226 9.27955V15.3743C5.56226 15.8723 6.1189 16.1709 6.53382 15.8942L10.2212 13.436C10.395 13.3201 10.4995 13.125 10.4995 12.916V9.27955C10.4995 8.64441 10.7717 8.03821 11.2463 7.61634L13.9834 5.18347C15.2843 4.0271 16.0304 2.36548 16.0304 0.625C16.0304 0.279785 15.7506 0 15.4055 0ZM13.153 4.24915L10.4159 6.68213C9.67469 7.34107 9.24951 8.28772 9.24951 9.27942V12.5815L6.81214 14.2064V9.27955C6.81214 8.28772 6.38697 7.34107 5.64575 6.68213L2.90869 4.24927C2.03149 3.46936 1.47156 2.40076 1.32166 1.24988H14.74C14.5901 2.40076 14.0303 3.46936 13.153 4.24915Z\"\n                    fill=\"white\"\n                  />\n                </g>\n                <defs>\n                  <clipPath id=\"clip0\">\n                    <rect width=\"16\" height=\"16\" fill=\"white\" />\n                  </clipPath>\n                </defs>\n              </svg>\n\n              <p className=\"filter-container__filters__text\">Filters</p>\n            </div>\n            <div\n              className={\n                this.checkFiltersDefault()\n                  ? \"filter-container__clear\"\n                  : \"filter-container__clear visible\"\n              }\n              onClick={async () => {\n                await this.clearFilters();\n                this.props.updateFilterState([\n                  this.state.inputSort,\n                  this.state.inputSalaryValue,\n                  this.state.inputFullTimeOnly,\n                  this.state.companyTags,\n                ]);\n              }}\n            >\n              Clear Filters\n            </div>\n          </div>\n          <p className=\"job-number\">\n            {this.props.jobNumber +\n              (this.props.jobNumber === 1 ? \" job\" : \" jobs\")}\n          </p>\n        </div>\n        <div\n          className={\n            this.state.filtersOpen ? \"filter-overlay visible\" : \"filter-overlay\"\n          }\n        >\n          <div className=\"filter-overlay__title\">\n            <svg\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"filter-overlay__title__close\"\n              onClick={() => {\n                this.toggleFilters();\n                this.toggleNoScroll();\n              }}\n            >\n              <path\n                d=\"M4.90857 3.51569L20.4649 19.072C20.8552 19.4624 20.8552 20.0959 20.4649 20.4863C20.0746 20.8766 19.441 20.8766 19.0507 20.4863L3.49436 4.9299C3.10403 4.53958 3.10403 3.90601 3.49435 3.51569C3.88468 3.12537 4.51824 3.12537 4.90857 3.51569Z\"\n                fill=\"#404668\"\n              />\n              <path\n                d=\"M20.6777 5.12146L5.12132 20.6778C4.731 21.0681 4.09743 21.0681 3.70711 20.6778C3.31678 20.2875 3.31678 19.6539 3.70711 19.2636L19.2635 3.70725C19.6538 3.31693 20.2873 3.31693 20.6777 3.70725C21.068 4.09757 21.068 4.73114 20.6777 5.12146Z\"\n                fill=\"#404668\"\n              />\n            </svg>\n            <h1>Filters</h1>\n          </div>\n          <div className=\"filter-overlay__body\">\n            <div className=\"filter-overlay__body__section\">\n              <form action=\"\" className=\"filter-overlay__body__section__sort\">\n                <h2>Sort by </h2>\n                <select\n                  name=\"sortOptions\"\n                  id=\"sortOptions\"\n                  value={this.state.inputSort}\n                  onChange={this.handleChangeSort}\n                >\n                  <option value=\"most recent\">most recent</option>\n                  <option value=\"salary (high to low)\">\n                    salary (high to low)\n                  </option>\n                  <option value=\"salary (low to high)\">\n                    salary (low to high)\n                  </option>\n                </select>\n              </form>\n            </div>\n            <hr />\n            <div className=\"filter-overlay__body__section\">\n              <h2>Company</h2>\n              <div className=\"filter-overlay__body__section__area\">\n                <svg\n                  width=\"18\"\n                  height=\"18\"\n                  viewBox=\"0 0 18 18\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M7.6875 2.25C4.69111 2.25 2.25 4.69112 2.25 7.6875C2.25 10.6839 4.69111 13.125 7.6875 13.125C8.98363 13.125 10.1751 12.6671 11.1108 11.9062L14.7898 15.5852C14.8416 15.6392 14.9037 15.6823 14.9724 15.712C15.0411 15.7417 15.115 15.7574 15.1899 15.7581C15.2647 15.7589 15.3389 15.7447 15.4082 15.7164C15.4775 15.6881 15.5405 15.6463 15.5934 15.5934C15.6463 15.5405 15.6881 15.4775 15.7164 15.4082C15.7447 15.3389 15.7589 15.2647 15.7581 15.1899C15.7574 15.115 15.7417 15.0411 15.712 14.9724C15.6823 14.9037 15.6392 14.8416 15.5852 14.7898L11.9063 11.1108C12.6671 10.1751 13.125 8.98363 13.125 7.6875C13.125 4.69112 10.6839 2.25 7.6875 2.25ZM7.6875 3.375C10.0759 3.375 12 5.29911 12 7.6875C12 8.85098 11.5411 9.90214 10.7966 10.6765C10.7507 10.7102 10.7102 10.7507 10.6765 10.7966C9.90214 11.5411 8.85098 12 7.6875 12C5.29911 12 3.375 10.0759 3.375 7.6875C3.375 5.29911 5.29911 3.375 7.6875 3.375Z\"\n                    fill=\"#A0AEC0\"\n                  />\n                </svg>\n                <input\n                  id=\"input-add-company-tag\"\n                  type=\"text\"\n                  placeholder=\"Search by company\"\n                  onKeyUp={(e) => this.handleUserInput(e)}\n                />\n              </div>\n              <ul className=\"filter-overlay__body__section__tags\">\n                {this.state.companyTags.map((company, i) => {\n                  return (\n                    <li key={i} onClick={() => this.removeCompanyTag(i)}>\n                      {company}\n                      <svg\n                        width=\"8\"\n                        height=\"8\"\n                        viewBox=\"0 0 8 8\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <g clip-path=\"url(#clip0)\">\n                          <path\n                            d=\"M1.63619 1.1719L6.82164 6.35735C6.95175 6.48745 6.95175 6.69864 6.82164 6.82875C6.69153 6.95886 6.48034 6.95886 6.35024 6.82875L1.16478 1.6433C1.03468 1.51319 1.03468 1.302 1.16478 1.1719C1.29489 1.04179 1.50608 1.04179 1.63619 1.1719Z\"\n                            fill=\"#4449B0\"\n                          />\n                          <path\n                            d=\"M6.89256 1.7065L1.70711 6.89195C1.577 7.02206 1.36581 7.02206 1.2357 6.89195C1.10559 6.76184 1.10559 6.55066 1.2357 6.42055L6.42115 1.2351C6.55126 1.10499 6.76245 1.10499 6.89256 1.2351C7.02267 1.36521 7.02267 1.5764 6.89256 1.7065Z\"\n                            fill=\"#4449B0\"\n                          />\n                        </g>\n                        <defs>\n                          <clipPath id=\"clip0\">\n                            <rect\n                              width=\"8\"\n                              height=\"8\"\n                              fill=\"white\"\n                              transform=\"translate(0 8) rotate(-90)\"\n                            />\n                          </clipPath>\n                        </defs>\n                      </svg>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <hr />\n            <div className=\"filter-overlay__body__section\">\n              <h2>Salary</h2>\n              <ThemeProvider theme={muiTheme}>\n                <Slider\n                  value={this.state.inputSalaryValue}\n                  onChange={this.handleChangeSlider}\n                  valueLabelDisplay=\"auto\"\n                  valueLabelFormat={(x) =>\n                    x !== 0 ? Math.round(x / 1000).toString() + \"k\" : 0\n                  }\n                  aria-labelledby=\"range-slider\"\n                  color=\"primary\"\n                  marks={marks}\n                  min={0}\n                  max={80000}\n                  step={5000}\n                />\n              </ThemeProvider>\n            </div>\n            <hr />\n            <div className=\"filter-overlay__body__section filter-overlay__body__section__type\">\n              <h2>Type of work</h2>\n              <form action=\"\">\n                <input\n                  type=\"checkbox\"\n                  id=\"full-time-only\"\n                  checked={this.state.inputFullTimeOnly}\n                  onChange={this.handleUserCheckbox}\n                />\n                <label htmlFor=\"full-time-only\">Full time only</label>\n              </form>\n            </div>\n          </div>\n          <div className=\"filter-overlay__submit\">\n            <button\n              className=\"btn btn--clear-filter\"\n              onClick={this.clearFilters}\n            >\n              Clear\n            </button>\n            <button\n              className=\"btn btn--apply-filter\"\n              onClick={this.applyFilters}\n            >\n              Confirm\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n  handleChangeSlider = (e, val) => {\n    this.setState({ inputSalaryValue: [...val] });\n  };\n  handleChangeSort = (e) => {\n    this.setState({ inputSort: e.target.value });\n  };\n  handleUserInput = (e) => {\n    this.setState({ inputCompanyTag: e.target.value });\n    e.keyCode === 13\n      ? this.addCompanyTag()\n      : this.setState({ inputCompanyTag: e.target.value });\n  };\n  checkFiltersDefault = () => {\n    return (\n      this.state.inputSort === \"most recent\" &&\n      JSON.stringify(this.state.inputSalaryValue) ===\n        JSON.stringify([0, 80000]) &&\n      this.state.inputFullTimeOnly === false &&\n      JSON.stringify(this.state.companyTags) === JSON.stringify([])\n    );\n  };\n  addCompanyTag = () => {\n    document.getElementById(\"input-add-company-tag\").value = \"\";\n    let updatedCompanyTags = [...this.state.companyTags];\n    if (this.tagValid(this.state.inputCompanyTag)) {\n      updatedCompanyTags.push(this.state.inputCompanyTag);\n      this.setState({\n        inputCompanyTag: \"\",\n        companyTags: [...updatedCompanyTags],\n      });\n    }\n  };\n  tagValid = (txt) => txt && txt.replace(/\\s/g, \"\").length;\n  handleUserCheckbox = (e) => {\n    this.setState({ inputFullTimeOnly: e.target.checked });\n  };\n  toggleFilters = () => {\n    this.state.filtersOpen\n      ? this.setState({ filtersOpen: false })\n      : this.setState({ filtersOpen: true });\n  };\n  toggleNoScroll = () => {\n    const body = document.body;\n    !this.state.filtersOpen\n      ? body.classList.add(\"no-scroll\")\n      : body.classList.remove(\"no-scroll\");\n  };\n  removeCompanyTag = (i) => {\n    let updatedCompanyTags = [...this.state.companyTags];\n    updatedCompanyTags.splice(i, 1);\n    this.setState({ companyTags: [...updatedCompanyTags] });\n  };\n  clearFilters = () => {\n    this.setState({\n      inputSort: \"most recent\",\n      inputSalaryValue: [0, 80000],\n      inputCompanyTag: \"\",\n      inputFullTimeOnly: false,\n      companyTags: [],\n    });\n  };\n  applyFilters = () => {\n    this.toggleFilters();\n    this.toggleNoScroll();\n    this.props.updateFilterState([\n      this.state.inputSort,\n      this.state.inputSalaryValue,\n      this.state.inputFullTimeOnly,\n      this.state.companyTags,\n    ]);\n  };\n}\n\nexport default Filters;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SearchField.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobCard.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/utilities/helper.js",["92","93"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Pagination.js",["94","95","96","97","98","99"],"import React from \"react\";\nimport \"./main.scss\";\nimport \"./Pagination.scss\";\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let pageNumbers = [];\n    for (\n      let i = 1;\n      i <= Math.ceil(this.props.totalJobs / this.props.jobsPerPage);\n      i++\n    ) {\n      pageNumbers.push(i);\n    }\n    return (\n      <nav className=\"nav-pagination\">\n        <ul className=\"pagination\">\n          <li\n            key={-1}\n            className=\"page-item\"\n            onClick={() => this.props.paginate(1)}\n            className=\"page-link page-link--arrow-2\"\n          >\n            {\"<<\"}\n          </li>\n          <li\n            key={0}\n            className=\"page-item\"\n            onClick={() =>\n              this.props.currentPage - 1 > 0 &&\n              this.props.paginate(this.props.currentPage - 1)\n            }\n            className=\"page-link page-link--arrow-1\"\n          >\n            {\"<\"}\n          </li>\n          {pageNumbers.map((number) => (\n            <li\n              key={number}\n              className=\"page-item\"\n              onClick={() => this.props.paginate(number)}\n              className={\n                this.props.currentPage === number\n                  ? \"page-link page-selected\"\n                  : \"page-link\"\n              }\n            >\n              {number}\n            </li>\n          ))}\n          <li\n            key={pageNumbers + 1}\n            className=\"page-item\"\n            onClick={() =>\n              this.props.currentPage + 1 < pageNumbers.length + 1 &&\n              this.props.paginate(this.props.currentPage + 1)\n            }\n            className=\"page-link page-link--arrow-1\"\n          >\n            {\">\"}\n          </li>\n          <li\n            key={pageNumbers + 2}\n            className=\"page-item\"\n            onClick={() => this.props.paginate(pageNumbers.length)}\n            className=\"page-link page-link--arrow-2\"\n          >\n            {\">>\"}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Pagination;\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":1,"column":8,"nodeType":"106","messageId":"107","endLine":1,"endColumn":12},{"ruleId":"100","replacedBy":"108"},{"ruleId":"102","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":105,"column":7,"nodeType":"112","messageId":"113","endLine":121,"endColumn":8},{"ruleId":"114","severity":1,"message":"115","line":182,"column":82,"nodeType":"116","messageId":"117","endLine":182,"endColumn":83,"suggestions":"118"},{"ruleId":"114","severity":1,"message":"119","line":182,"column":198,"nodeType":"116","messageId":"117","endLine":182,"endColumn":199,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":223,"column":32,"nodeType":"123","messageId":"124","endLine":223,"endColumn":34},{"ruleId":"121","severity":1,"message":"125","line":226,"column":11,"nodeType":"126","messageId":"127","endLine":226,"endColumn":18},{"ruleId":"104","severity":1,"message":"128","line":64,"column":11,"nodeType":"106","messageId":"107","endLine":64,"endColumn":17},{"ruleId":"114","severity":1,"message":"115","line":41,"column":88,"nodeType":"116","messageId":"117","endLine":41,"endColumn":89,"suggestions":"129"},{"ruleId":"114","severity":1,"message":"119","line":41,"column":204,"nodeType":"116","messageId":"117","endLine":41,"endColumn":205,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":6,"column":3,"nodeType":"133","messageId":"134","endLine":8,"endColumn":4},{"ruleId":"135","severity":1,"message":"136","line":26,"column":13,"nodeType":"137","endLine":26,"endColumn":53},{"ruleId":"135","severity":1,"message":"136","line":37,"column":13,"nodeType":"137","endLine":37,"endColumn":53},{"ruleId":"135","severity":1,"message":"136","line":46,"column":15,"nodeType":"137","endLine":50,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":62,"column":13,"nodeType":"137","endLine":62,"endColumn":53},{"ruleId":"135","severity":1,"message":"136","line":70,"column":13,"nodeType":"137","endLine":70,"endColumn":53},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["138"],["139"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["140","141"],"Unnecessary escape character: \\[.",["142","143"],"array-callback-return","Array.prototype.every() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.every() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'slider' is assigned a value but never used.",["144","145"],["146","147"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"messageId":"148","fix":"149","desc":"150"},{"messageId":"151","fix":"152","desc":"153"},{"messageId":"148","fix":"154","desc":"150"},{"messageId":"151","fix":"155","desc":"153"},{"messageId":"148","fix":"156","desc":"150"},{"messageId":"151","fix":"157","desc":"153"},{"messageId":"148","fix":"158","desc":"150"},{"messageId":"151","fix":"159","desc":"153"},"removeEscape",{"range":"160","text":"161"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"162","text":"163"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"164","text":"161"},{"range":"165","text":"163"},{"range":"166","text":"161"},{"range":"167","text":"163"},{"range":"168","text":"161"},{"range":"169","text":"163"},[7533,7534],"",[7533,7533],"\\",[7649,7650],[7649,7649],[1070,1071],[1070,1070],[1186,1187],[1186,1186]]