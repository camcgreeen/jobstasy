[{"/Users/camcgreen/Documents/web-dev/jobstasy/src/index.js":"1","/Users/camcgreen/Documents/web-dev/jobstasy/src/reportWebVitals.js":"2","/Users/camcgreen/Documents/web-dev/jobstasy/src/App.js":"3","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/LogIn.js":"4","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/ScrollToTop.js":"5","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SignUp.js":"6","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Likes.js":"7","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobDetail.js":"8","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Navbar.js":"9","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Footer.js":"10","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Jobs.js":"11","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Contact.js":"12","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobList.js":"13","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Filters.js":"14","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SearchField.js":"15","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobCard.js":"16","/Users/camcgreen/Documents/web-dev/jobstasy/src/utilities/helper.js":"17","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Pagination.js":"18"},{"size":1663,"mtime":1616496919203,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1613249505688,"results":"21","hashOfConfig":"20"},{"size":118,"mtime":1610570519050,"results":"22","hashOfConfig":"20"},{"size":4354,"mtime":1613249505684,"results":"23","hashOfConfig":"20"},{"size":380,"mtime":1613249505685,"results":"24","hashOfConfig":"20"},{"size":5024,"mtime":1613249505686,"results":"25","hashOfConfig":"20"},{"size":5258,"mtime":1613249505684,"results":"26","hashOfConfig":"20"},{"size":10763,"mtime":1613249505683,"results":"27","hashOfConfig":"20"},{"size":5498,"mtime":1613249505685,"results":"28","hashOfConfig":"20"},{"size":1664,"mtime":1613249505682,"results":"29","hashOfConfig":"20"},{"size":8965,"mtime":1616505810446,"results":"30","hashOfConfig":"20"},{"size":4673,"mtime":1613249505681,"results":"31","hashOfConfig":"20"},{"size":1469,"mtime":1613249505683,"results":"32","hashOfConfig":"20"},{"size":13568,"mtime":1616502558617,"results":"33","hashOfConfig":"20"},{"size":9024,"mtime":1616502278703,"results":"34","hashOfConfig":"20"},{"size":6029,"mtime":1616506113188,"results":"35","hashOfConfig":"20"},{"size":2828,"mtime":1613249505688,"results":"36","hashOfConfig":"20"},{"size":2067,"mtime":1613249505685,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"ahqbd9",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},"/Users/camcgreen/Documents/web-dev/jobstasy/src/index.js",[],["81","82"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/reportWebVitals.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/App.js",["83"],"import logo from \"./logo.svg\";\n// import \"./App.css\";\n\nfunction App() {\n  return <h1>Hey</h1>;\n}\n\nexport default App;\n",["84","85"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/LogIn.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/ScrollToTop.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SignUp.js",["86"],"import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport { disableRightMiddleClick } from \"../utilities/helper\";\nimport \"./FormAuthentication.scss\";\nimport \"./main.scss\";\nconst firebase = require(\"firebase\");\n\nclass SignUp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: null,\n      password: null,\n      passwordConfirmation: null,\n      nickname: null,\n      signupError: \"\",\n    };\n  }\n  render() {\n    return (\n      <div className=\"bg-authentication\">\n        <div className=\"container-authentication\">\n          <Link to=\"/signup\">\n            <img\n              className=\"logo-text\"\n              src=\"https://svgshare.com/i/Sub.svg\"\n              alt=\"\"\n            />\n          </Link>\n          <form onSubmit={(e) => this.submitSignup(e)}>\n            <input\n              autoFocus\n              type=\"text\"\n              placeholder=\"Email\"\n              className=\"input input--email\"\n              onChange={(e) => this.userTyping(\"email\", e)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              className=\"input input--password\"\n              onChange={(e) => this.userTyping(\"password\", e)}\n            />\n            <input\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              className=\"input input--password-confirmation\"\n              onChange={(e) => this.userTyping(\"passwordConfirmation\", e)}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Nickname\"\n              className=\"input input--nickname\"\n              onChange={(e) => this.userTyping(\"nickname\", e)}\n            />\n            <h4 className=\"error-text\">\n              {this.state.signupError ? this.state.signupError : null}\n            </h4>\n            <button type=\"submit\" className=\"btn btn--authentication\">\n              Sign up\n            </button>\n          </form>\n          <h5 className=\"h5-form\">\n            Already have an account? <Link to=\"/login\">Log in</Link>\n          </h5>\n        </div>\n      </div>\n    );\n  }\n  componentDidMount = () => {\n    disableRightMiddleClick();\n  };\n  checkNicknameValid = (nickname) => {\n    const regex = /^[a-zA-Z]+$/;\n    return regex.test(nickname);\n  };\n  formIsValid = () =>\n    this.state.password === this.state.passwordConfirmation &&\n    this.state.email !== null &&\n    this.state.password !== null &&\n    this.state.passwordConfirmation !== null &&\n    this.state.nickname !== null &&\n    this.checkNicknameValid(this.state.nickname);\n  userTyping = (type, e) => {\n    switch (type) {\n      case \"email\":\n        this.setState({ email: e.target.value });\n        break;\n      case \"password\":\n        this.setState({ password: e.target.value });\n        break;\n      case \"passwordConfirmation\":\n        this.setState({ passwordConfirmation: e.target.value });\n        break;\n      case \"nickname\":\n        this.setState({ nickname: e.target.value });\n        break;\n      default:\n        break;\n    }\n  };\n  submitSignup = (e) => {\n    e.preventDefault();\n    if (!this.formIsValid()) {\n      switch (true) {\n        case this.state.email === null:\n          this.setState({ signupError: \"You must enter an email address\" });\n          return;\n        case this.state.password === null:\n          this.setState({ signupError: \"You must enter a password\" });\n          return;\n        case this.state.password !== this.state.passwordConfirmation:\n          this.setState({ signupError: \"Passwords do not match\" });\n          return;\n        case this.state.nickname === null:\n          this.setState({ signupError: \"You must enter a nickname\" });\n          return;\n        case !this.checkNicknameValid(this.state.nickname):\n          this.setState({ signupError: \"Nickname must only include letters.\" });\n          return;\n      }\n      return;\n    }\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(\n        this.state.email.toLowerCase(),\n        this.state.password\n      )\n      .then(\n        (authRes) => {\n          const userObj = {\n            email: authRes.user.email,\n            nickname: this.state.nickname,\n          };\n          firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(this.state.email.toLowerCase())\n            .set(userObj)\n            .then(\n              async () => {\n                const likedJobs = [];\n                await firebase\n                  .firestore()\n                  .collection(\"jobs\")\n                  .doc(this.state.email)\n                  .set({\n                    likedJobs: [...likedJobs],\n                  });\n                this.props.history.push(\"/jobs\");\n              },\n              (dbError) => {\n                this.setState({ signupError: \"Failed to add user\" });\n              }\n            );\n        },\n        (authError) => {\n          this.setState({ signupError: authError.message });\n        }\n      );\n  };\n}\n\nexport default SignUp;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Likes.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobDetail.js",["87","88"],"import React from \"react\";\nimport {\n  disableRightMiddleClick,\n  convertSalary,\n  emailAddress,\n} from \"../utilities/helper\";\nimport Navbar from \"./Navbar\";\nimport Contact from \"./Contact\";\nimport Footer from \"./Footer\";\nimport \"./main.scss\";\nimport \"./Jobs.scss\";\nimport \"./JobDetail.scss\";\nconst firebase = require(\"firebase\");\n\nconst parse = require(\"html-react-parser\");\n\nclass JobDetail extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobLiked: false,\n      job: {},\n      createdAt: \"\",\n      email: null,\n      nickname: null,\n    };\n  }\n  render() {\n    const { job } = this.state;\n    return (\n      <>\n        <Navbar email={this.state.email} nickname={this.state.nickname} />\n        <div className=\"job-detail-bg\">\n          <div className=\"container\"></div>\n          <img className=\"job-detail-bg__img\" src={job.company_logo} alt=\"\" />\n          <h1 className=\"job-detail-bg__title\">{job.title}</h1>\n          <h2 className=\"job-detail-bg__company\">\n            <a\n              href={this.checkUrlExists(job.company_url) && job.company_url}\n              style={{ textDecoration: \"none\" }}\n              className={\n                this.checkUrlExists(job.company_url)\n                  ? \"job-detail-bg__company url\"\n                  : \"job-detail-bg__company\"\n              }\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {job.company + \" \"}\n            </a>\n            <span className=\"job-detail-bg__company__location\">\n              · {job.location}\n            </span>\n          </h2>\n          <a\n            className=\"btn btn--apply\"\n            href={`mailto:${emailAddress}?subject=Jobstasy - job search app&body=Hi, %0D%0A %0D%0A Sadly you can't actually apply to jobs using this application as the GitHub Jobs API provides no means to do this. %0D%0A %0D%0A You're more than welcome to send me a message on this email address to say hi, though! 👋 %0D%0A %0D%0A Thanks, %0D%0A Cam`}\n            style={{ textDecoration: \"none\" }}\n          >\n            Apply\n            <svg\n              version=\"1.1\"\n              id=\"Capa_1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              x=\"0px\"\n              y=\"0px\"\n              viewBox=\"0 0 512 512\"\n            >\n              <g>\n                <g>\n                  <path\n                    d=\"M506.134,241.843c-0.006-0.006-0.011-0.013-0.018-0.019l-104.504-104c-7.829-7.791-20.492-7.762-28.285,0.068\n\t\t\tc-7.792,7.829-7.762,20.492,0.067,28.284L443.558,236H20c-11.046,0-20,8.954-20,20c0,11.046,8.954,20,20,20h423.557\n\t\t\tl-70.162,69.824c-7.829,7.792-7.859,20.455-0.067,28.284c7.793,7.831,20.457,7.858,28.285,0.068l104.504-104\n\t\t\tc0.006-0.006,0.011-0.013,0.018-0.019C513.968,262.339,513.943,249.635,506.134,241.843z\"\n                  />\n                </g>\n              </g>\n            </svg>\n          </a>\n        </div>\n        <div className=\"container\">\n          <div className=\"job-detail-info\">\n            <div className=\"job-detail-info__right\">\n              <button\n                className=\"btn btn--like\"\n                onClick={() => this.toggleJobLiked(job)}\n                style={{\n                  backgroundColor: this.state.jobLiked ? \"#444CF4\" : \"#4449B0\",\n                }}\n              >\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <g clip-path=\"url(#clip0)\">\n                    <path\n                      d=\"M2.61182 5.22656H0.522376C0.235125 5.22656 0 5.4605 0 5.74891V15.1515C0 15.4397 0.234094 15.6737 0.522376 15.6737H2.61182C2.9001 15.6737 3.13419 15.4397 3.13419 15.1515V5.74891C3.13419 5.4605 2.89904 5.22656 2.61182 5.22656Z\"\n                      fill=\"white\"\n                    />\n                    <path\n                      d=\"M14.6966 5.22689C14.6125 5.21264 10.6735 5.22689 10.6735 5.22689L11.2237 3.72588C11.6033 2.68919 11.3575 1.10628 10.3042 0.543532C9.9612 0.360282 9.48201 0.268251 9.09567 0.365501C8.8741 0.421251 8.67939 0.567939 8.56332 0.76447C8.42985 0.990502 8.44363 1.25435 8.3961 1.50497C8.27557 2.14066 7.9752 2.74507 7.51004 3.19873C6.69904 3.9897 4.17969 6.27158 4.17969 6.27158V14.6294H12.8857C14.0605 14.6301 14.8304 13.3182 14.251 12.2935C14.9416 11.8511 15.1778 10.9194 14.7733 10.2041C15.464 9.76171 15.7002 8.82999 15.2957 8.11461C16.4874 7.35139 16.089 5.46239 14.6966 5.22689Z\"\n                      fill=\"white\"\n                    />\n                  </g>\n                  <defs>\n                    <clipPath id=\"clip0\">\n                      <rect width=\"16\" height=\"16\" fill=\"white\" />\n                    </clipPath>\n                  </defs>\n                </svg>\n                {this.state.jobLiked ? \"Liked\" : \"Like\"}\n              </button>\n              {parse(\n                `<div class='job-detail-info__right__description'>\n                  ${job.description}\n                </div>`\n              )}\n            </div>\n            <div className=\"job-detail-info__left\">\n              <div className=\"job-detail-info__left__about\">\n                <h1 className=\"job-detail-info__left__about__h1\">\n                  About this role\n                </h1>\n                <div className=\"job-detail-info__left__about__grid\">\n                  <p className=\"key\">Job posted on</p>\n                  <p className=\"value\">{this.state.createdAt}</p>\n                  <p className=\"key\">Job type</p>\n                  <p className=\"value\">{job.type}</p>\n                  <p className=\"key\">Salary</p>\n                  <p className=\"value\">\n                    £{convertSalary(job.salary_min)}-\n                    {convertSalary(job.salary_max)} GBP\n                  </p>\n                  <p className=\"key\">Applicants</p>\n                  <p className=\"value\">{job.applicant_number}</p>\n                </div>\n                <hr className=\"job-detail-info__left__about__line\" />\n                <h1 className=\"job-detail-info__left__about__h1\">\n                  Hiring timezones\n                </h1>\n                <ul className=\"job-detail-info__left__about__timezones\">\n                  <li>GMT</li>\n                  <li>GMT + 1</li>\n                  <li>GMT + 2</li>\n                </ul>\n                <hr className=\"job-detail-info__left__about__line\" />\n                <h2 className=\"job-detail-info__left__about__h2\">\n                  Note that some of the information on this page has been\n                  generated for the purpose of demonstration\n                </h2>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Contact />\n        <Footer email={this.state.email} nickname={this.state.nickname} />\n      </>\n    );\n  }\n  componentDidMount = async () => {\n    disableRightMiddleClick();\n    await this.setState({\n      job: this.props.location.state.details,\n      email: this.props.location.state.email,\n      nickname: this.props.location.state.nickname,\n    });\n    await this.getLikedJobs();\n    const checkAlreadyLiked = this.checkJobAlreadyLiked(this.state.job, [\n      ...this.state.likedJobs,\n    ]);\n    const createdAt = this.convertCreatedDate(this.state.job.created_at);\n    await this.setState({\n      createdAt,\n      jobLiked: checkAlreadyLiked.alreadyLiked,\n    });\n  };\n  checkUrlExists = (url) => {\n    const regex = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n    return regex.test(url);\n  };\n  convertCreatedDate = (date) => {\n    const dateSplit = date.split(\" \");\n    const res = dateSplit[2] + \" \" + dateSplit[1] + \" \" + dateSplit[5];\n    return res;\n  };\n  convertDate = (date) => {\n    const dateSplit = date.split(\" \");\n    const res = dateSplit[2] + \" \" + dateSplit[1] + \" \" + dateSplit[5];\n    return res;\n  };\n  postedAt = (date) => {\n    const timeDifferenceMs = Date.now() - Date.parse(date);\n    const minMs = 60000;\n    const hourMs = 3600000;\n    const dayMs = 86400000;\n    const weekMs = 604800000;\n    const monthMs = 2629800000;\n    const yearMs = 31536000000;\n    switch (true) {\n      case timeDifferenceMs < hourMs:\n        const minutes = Math.floor(timeDifferenceMs / minMs);\n        return minutes === 1\n          ? minutes + \"minute ago\"\n          : minutes + \" minutes ago\";\n      case timeDifferenceMs < dayMs:\n        const hours = Math.floor(timeDifferenceMs / hourMs);\n        return hours === 1 ? hours + \" hour ago\" : hours + \" hours ago\";\n      case timeDifferenceMs < weekMs:\n        const days = Math.floor(timeDifferenceMs / dayMs);\n        return days === 1 ? days + \" day ago\" : days + \" days ago\";\n      case timeDifferenceMs < monthMs:\n        const weeks = Math.floor(timeDifferenceMs / weekMs);\n        return weeks === 1 ? weeks + \" week ago\" : weeks + \" hours ago\";\n      case timeDifferenceMs < yearMs:\n        const months = Math.floor(timeDifferenceMs / monthMs);\n        return months === 1 ? months + \" month ago\" : months + \" months ago\";\n      case timeDifferenceMs > yearMs:\n        const years = Math.floor(timeDifferenceMs / yearMs);\n        return years === 1 ? years + \" year ago\" : years + \" years ago\";\n      default:\n        break;\n    }\n  };\n  getLikedJobs = async () => {\n    if (this.state.email) {\n      let likedJobs;\n      await firebase\n        .firestore()\n        .collection(\"jobs\")\n        .doc(this.state.email)\n        .get()\n        .then(async (res) => {\n          const data = res.data();\n          likedJobs = data.likedJobs;\n          this.setState({ likedJobs });\n        });\n    }\n  };\n  checkJobAlreadyLiked = (job, likedJobs) => {\n    let alreadyLiked = false;\n    let index = null;\n    for (let i = 0; i < likedJobs.length; i++) {\n      if (likedJobs[i].id === job.id) {\n        alreadyLiked = true;\n        index = i;\n        break;\n      }\n    }\n    return {\n      alreadyLiked,\n      index,\n    };\n  };\n  toggleJobLiked = async (job) => {\n    if (this.state.email) {\n      let likedJobs = [...this.state.likedJobs];\n      const jobLiked = this.checkJobAlreadyLiked(job, [...likedJobs]);\n      if (jobLiked.alreadyLiked) {\n        likedJobs.splice(jobLiked.index, 1);\n        await this.setState({ jobLiked: false });\n      } else {\n        likedJobs.push(job);\n        await this.setState({ jobLiked: true });\n      }\n      await firebase\n        .firestore()\n        .collection(\"jobs\")\n        .doc(this.state.email)\n        .set({\n          likedJobs: [...likedJobs],\n        });\n      this.getLikedJobs();\n    }\n  };\n}\n\nexport default JobDetail;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Navbar.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Footer.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Jobs.js",["89","90","91"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Contact.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobList.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Filters.js",["92"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SearchField.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobCard.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/utilities/helper.js",["93","94"],"export const convertSalary = (salary) => {\n  //55000 (number)\n  //55k (string)\n  return (salary / 1000).toString() + \"k\";\n};\n\nexport const generateRandomString = (length) => {\n  const chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  let result = \"\";\n  for (let i = length; i > 0; --i)\n    result += chars[Math.round(Math.random() * (chars.length - 1))];\n  return result;\n};\n\nexport const disableRightMiddleClick = () => {\n  document.addEventListener(\"contextmenu\", (e) => {\n    e.preventDefault();\n  });\n  window.addEventListener(\"auxclick\", (event) => {\n    if (event.button === 1) {\n      event.preventDefault();\n    }\n  });\n};\n\nexport const getRandom = (seed) => {\n  const x = Math.sin(seed++) * 10000;\n  return x - Math.floor(x);\n};\n\nexport const convertJobIdToSeed = (id) => {\n  let result = 0;\n  id.split(\"\").forEach((char) => (result += char.charCodeAt(0)));\n  return result;\n};\n\nexport const convertToSalary = (random) => {\n  return Math.floor(45 + random * 15) * 1000;\n};\n\nexport const urlRegex = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n\nexport const emailAddress = \"hello@camgreen.works\";\n\nexport const sortJobs = (jobs, sortBy) => {\n  switch (sortBy) {\n    case \"most recent\":\n      return jobs.sort(\n        (a, b) => Date.parse(b.created_at) - Date.parse(a.created_at)\n      );\n    case \"salary (high to low)\":\n      return jobs.sort((a, b) => Number(b.salary_max) - Number(a.salary_max));\n    case \"salary (low to high)\":\n      return jobs.sort((a, b) => Number(a.salary_min) - Number(b.salary_min));\n    default:\n      return [];\n  }\n};\n\nexport const filterJobsByCompany = (jobs, searchTerms) => {\n  let formattedSearchTerms = [...searchTerms];\n  for (let i = 0; i < formattedSearchTerms.length; i++) {\n    formattedSearchTerms[i] = formattedSearchTerms[i].split(\" \");\n  }\n  const flattenedSearchTerms = formattedSearchTerms.flat();\n  return jobs.filter((job) => {\n    const keywords = job.company.toLowerCase().split(\" \");\n    let matchFound = false;\n    // nested loop mxn complexity, but m and n will always be very low\n    flattenedSearchTerms.forEach((searchTerm) => {\n      keywords.forEach((keyword) => {\n        if (keyword === searchTerm.toLowerCase()) {\n          matchFound = true;\n          return;\n        }\n      });\n    });\n    return matchFound;\n  });\n};\n\nexport const filterJobsBySalary = (jobs, userMin, userMax) => {\n  return jobs.filter((job) => {\n    return (\n      (job.salary_max >= userMin || job.salary_min >= userMin) &&\n      (job.salary_min <= userMax || job.salary_max <= userMax)\n    );\n  });\n};\n\nexport const filterJobsByFullTime = (jobs) => {\n  return jobs.filter((job) => job.type === \"Full Time\");\n};\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Pagination.js",["95","96","97","98","99","100"],"import React from \"react\";\nimport \"./main.scss\";\nimport \"./Pagination.scss\";\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let pageNumbers = [];\n    for (\n      let i = 1;\n      i <= Math.ceil(this.props.totalJobs / this.props.jobsPerPage);\n      i++\n    ) {\n      pageNumbers.push(i);\n    }\n    return (\n      <nav className=\"nav-pagination\">\n        <ul className=\"pagination\">\n          <li\n            key={-1}\n            className=\"page-item\"\n            onClick={() => this.props.paginate(1)}\n            className=\"page-link page-link--arrow-2\"\n          >\n            {\"<<\"}\n          </li>\n          <li\n            key={0}\n            className=\"page-item\"\n            onClick={() =>\n              this.props.currentPage - 1 > 0 &&\n              this.props.paginate(this.props.currentPage - 1)\n            }\n            className=\"page-link page-link--arrow-1\"\n          >\n            {\"<\"}\n          </li>\n          {pageNumbers.map((number) => (\n            <li\n              key={number}\n              className=\"page-item\"\n              onClick={() => this.props.paginate(number)}\n              className={\n                this.props.currentPage === number\n                  ? \"page-link page-selected\"\n                  : \"page-link\"\n              }\n            >\n              {number}\n            </li>\n          ))}\n          <li\n            key={pageNumbers + 1}\n            className=\"page-item\"\n            onClick={() =>\n              this.props.currentPage + 1 < pageNumbers.length + 1 &&\n              this.props.paginate(this.props.currentPage + 1)\n            }\n            className=\"page-link page-link--arrow-1\"\n          >\n            {\">\"}\n          </li>\n          <li\n            key={pageNumbers + 2}\n            className=\"page-item\"\n            onClick={() => this.props.paginate(pageNumbers.length)}\n            className=\"page-link page-link--arrow-2\"\n          >\n            {\">>\"}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Pagination;\n",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":12},{"ruleId":"101","replacedBy":"109"},{"ruleId":"103","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":105,"column":7,"nodeType":"113","messageId":"114","endLine":121,"endColumn":8},{"ruleId":"115","severity":1,"message":"116","line":182,"column":82,"nodeType":"117","messageId":"118","endLine":182,"endColumn":83,"suggestions":"119"},{"ruleId":"115","severity":1,"message":"120","line":182,"column":198,"nodeType":"117","messageId":"118","endLine":182,"endColumn":199,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":47,"column":7,"nodeType":"124","messageId":"125","endLine":47,"endColumn":19},{"ruleId":"126","severity":1,"message":"127","line":260,"column":32,"nodeType":"128","messageId":"129","endLine":260,"endColumn":34},{"ruleId":"126","severity":1,"message":"130","line":263,"column":11,"nodeType":"131","messageId":"132","endLine":263,"endColumn":18},{"ruleId":"105","severity":1,"message":"133","line":64,"column":11,"nodeType":"107","messageId":"108","endLine":64,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":41,"column":88,"nodeType":"117","messageId":"118","endLine":41,"endColumn":89,"suggestions":"134"},{"ruleId":"115","severity":1,"message":"120","line":41,"column":204,"nodeType":"117","messageId":"118","endLine":41,"endColumn":205,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":6,"column":3,"nodeType":"138","messageId":"139","endLine":8,"endColumn":4},{"ruleId":"140","severity":1,"message":"141","line":26,"column":13,"nodeType":"142","endLine":26,"endColumn":53},{"ruleId":"140","severity":1,"message":"141","line":37,"column":13,"nodeType":"142","endLine":37,"endColumn":53},{"ruleId":"140","severity":1,"message":"141","line":46,"column":15,"nodeType":"142","endLine":50,"endColumn":16},{"ruleId":"140","severity":1,"message":"141","line":62,"column":13,"nodeType":"142","endLine":62,"endColumn":53},{"ruleId":"140","severity":1,"message":"141","line":70,"column":13,"nodeType":"142","endLine":70,"endColumn":53},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["143"],["144"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["145","146"],"Unnecessary escape character: \\[.",["147","148"],"no-dupe-keys","Duplicate key 'searchedJobs'.","ObjectExpression","unexpected","array-callback-return","Array.prototype.every() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.every() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'slider' is assigned a value but never used.",["149","150"],["151","152"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"messageId":"153","fix":"154","desc":"155"},{"messageId":"156","fix":"157","desc":"158"},{"messageId":"153","fix":"159","desc":"155"},{"messageId":"156","fix":"160","desc":"158"},{"messageId":"153","fix":"161","desc":"155"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"153","fix":"163","desc":"155"},{"messageId":"156","fix":"164","desc":"158"},"removeEscape",{"range":"165","text":"166"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"167","text":"168"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"169","text":"166"},{"range":"170","text":"168"},{"range":"171","text":"166"},{"range":"172","text":"168"},{"range":"173","text":"166"},{"range":"174","text":"168"},[7529,7530],"",[7529,7529],"\\",[7645,7646],[7645,7645],[1070,1071],[1070,1070],[1186,1187],[1186,1186]]