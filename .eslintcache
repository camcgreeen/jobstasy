[{"/Users/camcgreen/Documents/web-dev/jobstasy/src/index.js":"1","/Users/camcgreen/Documents/web-dev/jobstasy/src/reportWebVitals.js":"2","/Users/camcgreen/Documents/web-dev/jobstasy/src/App.js":"3","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/LogIn.js":"4","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/ScrollToTop.js":"5","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SignUp.js":"6","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Likes.js":"7","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobDetail.js":"8","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Navbar.js":"9","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Footer.js":"10","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Jobs.js":"11","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Contact.js":"12","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobList.js":"13","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Filters.js":"14","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SearchField.js":"15","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobCard.js":"16","/Users/camcgreen/Documents/web-dev/jobstasy/src/utilities/helper.js":"17","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Pagination.js":"18"},{"size":2713,"mtime":1611093583355,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1610570519056,"results":"21","hashOfConfig":"20"},{"size":118,"mtime":1610570519050,"results":"22","hashOfConfig":"20"},{"size":4354,"mtime":1611185566882,"results":"23","hashOfConfig":"20"},{"size":380,"mtime":1610570519054,"results":"24","hashOfConfig":"20"},{"size":5024,"mtime":1611185558519,"results":"25","hashOfConfig":"20"},{"size":5258,"mtime":1611183545680,"results":"26","hashOfConfig":"20"},{"size":10750,"mtime":1611184766608,"results":"27","hashOfConfig":"20"},{"size":5498,"mtime":1611185253748,"results":"28","hashOfConfig":"20"},{"size":1623,"mtime":1611184298339,"results":"29","hashOfConfig":"20"},{"size":7549,"mtime":1611183533493,"results":"30","hashOfConfig":"20"},{"size":4666,"mtime":1611183745861,"results":"31","hashOfConfig":"20"},{"size":1469,"mtime":1611184905885,"results":"32","hashOfConfig":"20"},{"size":13568,"mtime":1611184160197,"results":"33","hashOfConfig":"20"},{"size":7764,"mtime":1611185739251,"results":"34","hashOfConfig":"20"},{"size":5785,"mtime":1611184476653,"results":"35","hashOfConfig":"20"},{"size":2775,"mtime":1611183503825,"results":"36","hashOfConfig":"20"},{"size":2067,"mtime":1611185398420,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"ahqbd9",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},"/Users/camcgreen/Documents/web-dev/jobstasy/src/index.js",["83","84","85","86"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  Route,\n  BrowserRouter as Router,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport LogIn from \"./components/LogIn\";\nimport SignUp from \"./components/SignUp\";\nimport Jobs from \"./components/Jobs\";\nimport Likes from \"./components/Likes\";\nimport JobDetail from \"./components/JobDetail\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\n\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDSdLiJqn6nILt4u0pMB8L_UrAvgofINN0\",\n  authDomain: \"jobstasy.firebaseapp.com\",\n  projectId: \"jobstasy\",\n  storageBucket: \"jobstasy.appspot.com\",\n  messagingSenderId: \"550293971299\",\n  appId: \"1:550293971299:web:6decad660871b21790f356\",\n});\n\nconst routing = (\n  <Router>\n    <div id=\"routing-container\">\n      {/* <Navbar /> */}\n      <ScrollToTop>\n        {/* <Navbar /> */}\n        <Route exact path=\"/\">\n          <Redirect to=\"/jobs\" />\n        </Route>\n        <Route path=\"/login\" component={LogIn}></Route>\n        <Route path=\"/signup\" component={SignUp}></Route>\n        <Route path=\"/jobs\" exact component={Jobs}></Route>\n        <Route path=\"/likes\" component={Likes}></Route>\n        <Route path=\"/jobs/:id\" component={JobDetail}></Route>\n        {/* <Footer /> */}\n      </ScrollToTop>\n    </div>\n  </Router>\n);\n\n// const AuthenticatedRoutes = () => {\n//   return (\n//     <>\n//       <Navbar />\n//       <Router>\n//         <Route path=\"/jobs\" exact component={Jobs}></Route>\n//         <Route path=\"/likes\" component={Likes}></Route>\n//         <Route path=\"/jobs/:id\" component={JobDetail}></Route>\n//       </Router>\n//       <Footer />\n//     </>\n//   );\n// };\n\n// const routing = (\n//   <Router>\n//     <div id=\"routing-container\">\n//       {/* <Navbar /> */}\n//       <ScrollToTop>\n//         <Navbar />\n//         <Route exact path=\"/\">\n//           <Redirect to=\"/login\" />\n//         </Route>\n//         <Route path=\"/login\" component={LogIn}></Route>\n//         <Route path=\"/signup\" component={SignUp}></Route>\n//         <Route component={AuthenticatedRoutes} />\n//         <Footer />\n//       </ScrollToTop>\n//     </div>\n//   </Router>\n// );\n\nReactDOM.render(\n  <React.StrictMode>{routing}</React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["87","88"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/reportWebVitals.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/App.js",["89"],"import logo from \"./logo.svg\";\n// import \"./App.css\";\n\nfunction App() {\n  return <h1>Hey</h1>;\n}\n\nexport default App;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/LogIn.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/ScrollToTop.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SignUp.js",["90"],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Likes.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobDetail.js",["91","92"],"import React from \"react\";\nimport { disableRightMiddleClick, convertSalary } from \"../utilities/helper\";\nimport \"./main.scss\";\nimport \"./Jobs.scss\";\nimport \"./JobDetail.scss\";\nimport Navbar from \"./Navbar\";\nimport Contact from \"./Contact\";\nimport Footer from \"./Footer\";\nconst firebase = require(\"firebase\");\n\nconst parse = require(\"html-react-parser\");\n\nclass JobDetail extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      jobLiked: false,\n      job: {},\n      createdAt: \"\",\n      email: null,\n      nickname: null,\n    };\n  }\n  render() {\n    const { job } = this.state;\n    return (\n      <>\n        <Navbar email={this.state.email} nickname={this.state.nickname} />\n        <div className=\"job-detail-bg\">\n          <div className=\"container\"></div>\n          <img className=\"job-detail-bg__img\" src={job.company_logo} alt=\"\" />\n          <h1 className=\"job-detail-bg__title\">{job.title}</h1>\n          <h2 className=\"job-detail-bg__company\">\n            <a\n              href={this.checkUrlExists(job.company_url) && job.company_url}\n              style={{ textDecoration: \"none\" }}\n              className={\n                this.checkUrlExists(job.company_url)\n                  ? \"job-detail-bg__company url\"\n                  : \"job-detail-bg__company\"\n              }\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {job.company + \" \"}\n            </a>\n            <span className=\"job-detail-bg__company__location\">\n              · {job.location}\n            </span>\n          </h2>\n          <a\n            className=\"btn btn--apply\"\n            href=\"mailto:c.c.green@outlook.com?subject=Jobstasy - job search app&body=Hi, %0D%0A %0D%0A Sadly you can't actually apply to jobs using this application as the GitHub Jobs API provides no means to do this. %0D%0A %0D%0A You're more than welcome to send me a message on this email address to say hi, though! 👋 %0D%0A %0D%0A Thanks, %0D%0A Cameron\"\n            style={{ textDecoration: \"none\" }}\n          >\n            Apply\n            <svg\n              version=\"1.1\"\n              id=\"Capa_1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              x=\"0px\"\n              y=\"0px\"\n              viewBox=\"0 0 512 512\"\n            >\n              <g>\n                <g>\n                  <path\n                    d=\"M506.134,241.843c-0.006-0.006-0.011-0.013-0.018-0.019l-104.504-104c-7.829-7.791-20.492-7.762-28.285,0.068\n\t\t\tc-7.792,7.829-7.762,20.492,0.067,28.284L443.558,236H20c-11.046,0-20,8.954-20,20c0,11.046,8.954,20,20,20h423.557\n\t\t\tl-70.162,69.824c-7.829,7.792-7.859,20.455-0.067,28.284c7.793,7.831,20.457,7.858,28.285,0.068l104.504-104\n\t\t\tc0.006-0.006,0.011-0.013,0.018-0.019C513.968,262.339,513.943,249.635,506.134,241.843z\"\n                  />\n                </g>\n              </g>\n            </svg>\n          </a>\n        </div>\n        <div className=\"container\">\n          <div className=\"job-detail-info\">\n            <div className=\"job-detail-info__right\">\n              <button\n                className=\"btn btn--like\"\n                onClick={() => this.toggleJobLiked(job)}\n                style={{\n                  backgroundColor: this.state.jobLiked ? \"#444CF4\" : \"#4449B0\",\n                }}\n              >\n                <svg\n                  width=\"16\"\n                  height=\"16\"\n                  viewBox=\"0 0 16 16\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <g clip-path=\"url(#clip0)\">\n                    <path\n                      d=\"M2.61182 5.22656H0.522376C0.235125 5.22656 0 5.4605 0 5.74891V15.1515C0 15.4397 0.234094 15.6737 0.522376 15.6737H2.61182C2.9001 15.6737 3.13419 15.4397 3.13419 15.1515V5.74891C3.13419 5.4605 2.89904 5.22656 2.61182 5.22656Z\"\n                      fill=\"white\"\n                    />\n                    <path\n                      d=\"M14.6966 5.22689C14.6125 5.21264 10.6735 5.22689 10.6735 5.22689L11.2237 3.72588C11.6033 2.68919 11.3575 1.10628 10.3042 0.543532C9.9612 0.360282 9.48201 0.268251 9.09567 0.365501C8.8741 0.421251 8.67939 0.567939 8.56332 0.76447C8.42985 0.990502 8.44363 1.25435 8.3961 1.50497C8.27557 2.14066 7.9752 2.74507 7.51004 3.19873C6.69904 3.9897 4.17969 6.27158 4.17969 6.27158V14.6294H12.8857C14.0605 14.6301 14.8304 13.3182 14.251 12.2935C14.9416 11.8511 15.1778 10.9194 14.7733 10.2041C15.464 9.76171 15.7002 8.82999 15.2957 8.11461C16.4874 7.35139 16.089 5.46239 14.6966 5.22689Z\"\n                      fill=\"white\"\n                    />\n                  </g>\n                  <defs>\n                    <clipPath id=\"clip0\">\n                      <rect width=\"16\" height=\"16\" fill=\"white\" />\n                    </clipPath>\n                  </defs>\n                </svg>\n                {this.state.jobLiked ? \"Liked\" : \"Like\"}\n              </button>\n              {parse(\n                `<div class='job-detail-info__right__description'>\n                  ${job.description}\n                </div>`\n              )}\n            </div>\n            <div className=\"job-detail-info__left\">\n              <div className=\"job-detail-info__left__about\">\n                <h1 className=\"job-detail-info__left__about__h1\">\n                  About this role\n                </h1>\n                <div className=\"job-detail-info__left__about__grid\">\n                  <p className=\"key\">Job posted on</p>\n                  <p className=\"value\">{this.state.createdAt}</p>\n                  <p className=\"key\">Job type</p>\n                  <p className=\"value\">{job.type}</p>\n                  <p className=\"key\">Salary</p>\n                  <p className=\"value\">\n                    £{convertSalary(job.salary_min)}-\n                    {convertSalary(job.salary_max)} GBP\n                  </p>\n                  <p className=\"key\">Applicants</p>\n                  <p className=\"value\">{job.applicant_number}</p>\n                </div>\n                <hr className=\"job-detail-info__left__about__line\" />\n                <h1 className=\"job-detail-info__left__about__h1\">\n                  Hiring timezones\n                </h1>\n                <ul className=\"job-detail-info__left__about__timezones\">\n                  <li>GMT</li>\n                  <li>GMT + 1</li>\n                  <li>GMT + 2</li>\n                </ul>\n                <hr className=\"job-detail-info__left__about__line\" />\n                <h2 className=\"job-detail-info__left__about__h2\">\n                  Note that some of the information on this page has been\n                  generated for the purpose of demonstration\n                </h2>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Contact />\n        <Footer email={this.state.email} nickname={this.state.nickname} />\n      </>\n    );\n  }\n  componentDidMount = async () => {\n    disableRightMiddleClick();\n    await this.setState({\n      job: this.props.location.state.details,\n      email: this.props.location.state.email,\n      nickname: this.props.location.state.nickname,\n    });\n    await this.getLikedJobs();\n    const checkAlreadyLiked = this.checkJobAlreadyLiked(this.state.job, [\n      ...this.state.likedJobs,\n    ]);\n    const createdAt = this.convertCreatedDate(this.state.job.created_at);\n    await this.setState({\n      createdAt,\n      jobLiked: checkAlreadyLiked.alreadyLiked,\n    });\n  };\n  checkUrlExists = (url) => {\n    const regex = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n    return regex.test(url);\n  };\n  convertCreatedDate = (date) => {\n    const dateSplit = date.split(\" \");\n    const res = dateSplit[2] + \" \" + dateSplit[1] + \" \" + dateSplit[5];\n    return res;\n  };\n  convertDate = (date) => {\n    const dateSplit = date.split(\" \");\n    const res = dateSplit[2] + \" \" + dateSplit[1] + \" \" + dateSplit[5];\n    return res;\n  };\n  postedAt = (date) => {\n    const timeDifferenceMs = Date.now() - Date.parse(date);\n    const minMs = 60000;\n    const hourMs = 3600000;\n    const dayMs = 86400000;\n    const weekMs = 604800000;\n    const monthMs = 2629800000;\n    const yearMs = 31536000000;\n    switch (true) {\n      case timeDifferenceMs < hourMs:\n        const minutes = Math.floor(timeDifferenceMs / minMs);\n        return minutes === 1\n          ? minutes + \"minute ago\"\n          : minutes + \" minutes ago\";\n      case timeDifferenceMs < dayMs:\n        const hours = Math.floor(timeDifferenceMs / hourMs);\n        return hours === 1 ? hours + \" hour ago\" : hours + \" hours ago\";\n      case timeDifferenceMs < weekMs:\n        const days = Math.floor(timeDifferenceMs / dayMs);\n        return days === 1 ? days + \" day ago\" : days + \" days ago\";\n      case timeDifferenceMs < monthMs:\n        const weeks = Math.floor(timeDifferenceMs / weekMs);\n        return weeks === 1 ? weeks + \" week ago\" : weeks + \" hours ago\";\n      case timeDifferenceMs < yearMs:\n        const months = Math.floor(timeDifferenceMs / monthMs);\n        return months === 1 ? months + \" month ago\" : months + \" months ago\";\n      case timeDifferenceMs > yearMs:\n        const years = Math.floor(timeDifferenceMs / yearMs);\n        return years === 1 ? years + \" year ago\" : years + \" years ago\";\n      default:\n        break;\n    }\n  };\n  getLikedJobs = async () => {\n    if (this.state.email) {\n      let likedJobs;\n      await firebase\n        .firestore()\n        .collection(\"jobs\")\n        .doc(this.state.email)\n        .get()\n        .then(async (res) => {\n          const data = res.data();\n          likedJobs = data.likedJobs;\n          this.setState({ likedJobs });\n        });\n    }\n  };\n  checkJobAlreadyLiked = (job, likedJobs) => {\n    let alreadyLiked = false;\n    let index = null;\n    for (let i = 0; i < likedJobs.length; i++) {\n      if (likedJobs[i].id === job.id) {\n        alreadyLiked = true;\n        index = i;\n        break;\n      }\n    }\n    return {\n      alreadyLiked,\n      index,\n    };\n  };\n  toggleJobLiked = async (job) => {\n    if (this.state.email) {\n      let likedJobs = [...this.state.likedJobs];\n      const jobLiked = this.checkJobAlreadyLiked(job, [...likedJobs]);\n      if (jobLiked.alreadyLiked) {\n        likedJobs.splice(jobLiked.index, 1);\n        await this.setState({ jobLiked: false });\n      } else {\n        likedJobs.push(job);\n        await this.setState({ jobLiked: true });\n      }\n      await firebase\n        .firestore()\n        .collection(\"jobs\")\n        .doc(this.state.email)\n        .set({\n          likedJobs: [...likedJobs],\n        });\n      this.getLikedJobs();\n    }\n  };\n}\n\nexport default JobDetail;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Navbar.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Footer.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Jobs.js",["93","94"],"import React from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./Navbar\";\nimport SearchField from \"./SearchField\";\nimport Filters from \"./Filters\";\nimport JobList from \"./JobList\";\nimport Pagination from \"./Pagination\";\nimport Contact from \"./Contact\";\nimport Footer from \"./Footer\";\nimport {\n  disableRightMiddleClick,\n  getRandom,\n  convertJobIdToSeed,\n  convertToSalary,\n  urlRegex,\n  sortJobs,\n  filterJobsByCompany,\n  filterJobsBySalary,\n  filterJobsByFullTime,\n} from \"../utilities/helper\";\nimport \"./main.scss\";\nimport \"./Jobs.scss\";\nconst firebase = require(\"firebase\");\n\nclass Jobs extends React.Component {\n  constructor() {\n    super();\n    this.scrollDiv = React.createRef();\n    this.state = {\n      email: \"\",\n      nickname: \"\",\n      loaded: false,\n      jobs: [],\n      description: \"\",\n      location: \"\",\n      sort: \"most recent\",\n      salaryValue: [0, 80000],\n      fullTimeOnly: false,\n      companyTags: [],\n      defaultJobs: [],\n      companyNames: [\n        { company: \"\", company_url: \"\" },\n        { company: \"\", company_url: \"\" },\n        { company: \"\", company_url: \"\" },\n      ],\n      searchedJobs: [],\n      currentPage: 1,\n      jobsPerPage: 10,\n      noJobsFound: false,\n    };\n  }\n  render() {\n    const indexOfLastJob = this.state.currentPage * this.state.jobsPerPage;\n    const indexOfFirstJob = indexOfLastJob - this.state.jobsPerPage;\n    const currentJobs = this.state.jobs.slice(indexOfFirstJob, indexOfLastJob);\n    return (\n      <>\n        <Navbar email={this.state.email} nickname={this.state.nickname} />\n        <SearchField\n          companyNames={this.state.companyNames}\n          updateSearchState={this.updateSearchState}\n        />\n        <div className=\"container\">\n          <div id=\"scroll-to\"></div>\n          <Filters\n            jobNumber={this.state.jobs.length}\n            updateFilterState={this.updateFilterState}\n            ref={this.scrollDiv}\n          />\n          <JobList\n            jobs={currentJobs}\n            noJobsFound={this.state.noJobsFound}\n            email={this.state.email}\n            nickname={this.state.nickname}\n            type={\"jobs\"}\n          />\n          {this.state.jobs.length > 0 && (\n            <Pagination\n              jobsPerPage={this.state.jobsPerPage}\n              totalJobs={this.state.jobs.length}\n              paginate={this.paginate}\n              currentPage={this.state.currentPage}\n            />\n          )}\n        </div>\n        <Contact />\n        <Footer email={this.state.email} nickname={this.state.nickname} />\n      </>\n    );\n  }\n  componentDidMount = async () => {\n    disableRightMiddleClick();\n    setTimeout(() => {\n      firebase.auth().onAuthStateChanged(async (_usr) => {\n        if (!_usr) {\n          this.props.history.push(\"/login\");\n        } else {\n          firebase\n            .firestore()\n            .collection(\"users\")\n            .doc(_usr.email)\n            .get()\n            .then(async (doc) => {\n              const userData = doc.data();\n              await this.setState({\n                email: userData.email,\n                nickname: userData.nickname,\n              });\n            });\n        }\n      });\n    }, 270);\n    await this.getJobs();\n    const companyNames = this.checkCompanyUrlExists(this.state.jobs);\n    await this.setState({ companyNames });\n  };\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (\n      prevState.description !== this.state.description ||\n      prevState.location !== this.state.location ||\n      prevState.sort !== this.state.sort ||\n      JSON.stringify(prevState.salaryValue) !==\n        JSON.stringify(this.state.salaryValue) ||\n      prevState.fullTimeOnly !== this.state.fullTimeOnly ||\n      JSON.stringify(prevState.companyTags) !==\n        JSON.stringify(this.state.companyTags)\n    ) {\n      this.getJobs();\n    }\n    if (\n      (prevState.description !== this.state.description &&\n        this.state.description !== \"\") ||\n      (prevState.location !== this.state.location && this.state.location !== \"\")\n    ) {\n      document\n        .getElementById(\"search-field-inputs\")\n        .scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n  paginate = async (pageNumber) => {\n    await this.setState({ currentPage: pageNumber });\n    document\n      .getElementById(\"search-field-inputs\")\n      .scrollIntoView({ behavior: \"smooth\" });\n  };\n  updateSearchState = (searchState) => {\n    this.setState({ description: searchState[0], location: searchState[1] });\n  };\n  updateFilterState = (filterState) => {\n    this.setState({\n      sort: filterState[0],\n      salaryValue: [...filterState[1]],\n      fullTimeOnly: filterState[2],\n      companyTags: [...filterState[3]],\n    });\n  };\n  getJobs = async () => {\n    let jobs = [];\n    await this.setState({ jobs, noJobsFound: false });\n    try {\n      jobs = await axios(\n        `/positions.json?description=${this.state.description}&location=${this.state.location}`\n      );\n    } catch (err) {\n      jobs = [];\n      await this.setState({ jobs, noJobsFound: true });\n      return;\n    }\n    jobs = this.addAttributes(jobs.data);\n    jobs = this.applyFilters(jobs);\n\n    await this.setState({\n      currentPage: 1,\n      jobs,\n      noJobsFound: jobs.length > 0 ? false : true,\n    });\n  };\n  addAttributes = (jobs) => {\n    jobs = this.addSalary(jobs);\n    jobs = this.addApplicants(jobs);\n    return jobs;\n  };\n  generatePersistentSalary = (jobId) => {\n    const jobSeed = convertJobIdToSeed(jobId);\n    const random = getRandom(jobSeed);\n    return convertToSalary(random);\n  };\n  generatePersistentApplicantNumber = (jobId) => {\n    const jobSeed = convertJobIdToSeed(jobId);\n    const random = getRandom(jobSeed);\n    return Math.floor(4 + random * 58);\n  };\n  addSalary = (jobs) => {\n    jobs.forEach((job) => {\n      const min = this.generatePersistentSalary(job.id);\n      const max = min + 5000;\n      job.salary_min = min;\n      job.salary_max = max;\n    });\n    return jobs;\n  };\n  addApplicants = (jobs) => {\n    jobs.forEach((job) => {\n      job.applicant_number = this.generatePersistentApplicantNumber(job.id);\n    });\n    return jobs;\n  };\n  addApplyBefore = (jobs) => {\n    const monthInMs = 2629800000;\n    const applyInterval = monthInMs * 2.5;\n    jobs.forEach((job) => {\n      const createdDate = Date.parse(job.created_at);\n      const applyBeforeDate = new Date(createdDate + applyInterval);\n      job.apply_before = applyBeforeDate;\n    });\n    return jobs;\n  };\n  checkCompanyUrlExists = (jobs) => {\n    let result = [];\n    const regex = urlRegex;\n    jobs.forEach((job) => {\n      let companyAlreadyInList = false;\n      result.every((jobInList) => {\n        if (jobInList.company === job.company) {\n          companyAlreadyInList = true;\n          return;\n        }\n      });\n      if (\n        job.company_url !== null &&\n        regex.test(job.company_url) &&\n        !companyAlreadyInList &&\n        result.length < 3\n      ) {\n        result.push(job);\n      }\n    });\n    return result;\n  };\n  applyFilters = (jobs) => {\n    let filteredJobs = [...jobs];\n    filteredJobs = sortJobs(filteredJobs, this.state.sort);\n    if (this.state.companyTags.length > 0) {\n      filteredJobs = filterJobsByCompany(filteredJobs, this.state.companyTags);\n    }\n    filteredJobs = filterJobsBySalary(\n      filteredJobs,\n      this.state.salaryValue[0],\n      this.state.salaryValue[1]\n    );\n    filteredJobs = this.state.fullTimeOnly\n      ? filterJobsByFullTime(filteredJobs)\n      : filteredJobs;\n    return filteredJobs;\n  };\n}\n\nexport default Jobs;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Contact.js",["95"],"import { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport \"./main.scss\";\nimport \"./Contact.scss\";\n\nclass Contact extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      formOpen: false,\n    };\n  }\n  render() {\n    return (\n      <>\n        <div className=\"bubble\" onClick={this.toggleFormOpen}>\n          {this.state.formOpen ? (\n            <svg\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M4.90857 3.51569L20.4649 19.072C20.8552 19.4624 20.8552 20.0959 20.4649 20.4863C20.0746 20.8766 19.441 20.8766 19.0507 20.4863L3.49436 4.9299C3.10403 4.53958 3.10403 3.90601 3.49435 3.51569C3.88468 3.12537 4.51824 3.12537 4.90857 3.51569Z\"\n                fill=\"white\"\n              />\n              <path\n                d=\"M20.6777 5.12146L5.12132 20.6778C4.731 21.0681 4.09743 21.0681 3.70711 20.6778C3.31678 20.2875 3.31678 19.6539 3.70711 19.2636L19.2635 3.70725C19.6538 3.31693 20.2873 3.31693 20.6777 3.70725C21.068 4.09757 21.068 4.73114 20.6777 5.12146Z\"\n                fill=\"white\"\n              />\n            </svg>\n          ) : (\n            <svg\n              width=\"24\"\n              height=\"18\"\n              viewBox=\"0 0 24 18\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M0.50114 1.46044C3.79505 4.25002 9.57483 9.15773 11.2736 10.688C11.5016 10.8945 11.7462 10.9995 12.0001 10.9995C12.2535 10.9995 12.4977 10.8955 12.7253 10.6899C14.4255 9.1582 20.2052 4.25002 23.4992 1.46044C23.7043 1.28709 23.7355 0.982406 23.5695 0.770484C23.1857 0.280781 22.6134 0 22.0001 0H2.00016C1.38689 0 0.814593 0.280781 0.430828 0.770531C0.264796 0.982406 0.296062 1.28709 0.50114 1.46044Z\"\n                fill=\"white\"\n              />\n              <path\n                d=\"M23.71 2.9724C23.5327 2.8899 23.3242 2.91868 23.1768 3.04468C19.5239 6.14133 14.8618 10.1106 13.395 11.4323C12.5717 12.1755 11.4292 12.1755 10.604 11.4314C9.0405 10.0227 3.80512 5.57199 0.823219 3.04463C0.674766 2.91863 0.465797 2.89083 0.290016 2.97235C0.113297 3.05443 0 3.23119 0 3.426V16.0002C0 17.1033 0.896953 18.0002 2.00002 18.0002H22C23.103 18.0002 24 17.1033 24 16.0002V3.426C24 3.23119 23.8867 3.05396 23.71 2.9724Z\"\n                fill=\"white\"\n              />\n            </svg>\n          )}\n        </div>\n        <div\n          className={\n            this.state.formOpen ? \"contact-form visible\" : \"contact-form\"\n          }\n        >\n          <div className=\"contact-form__main\">\n            <h1>Hello! 👋</h1>\n            <p>\n              If you would like to contact me regarding any opportunities, I\n              would love to hear from you! 😁{\" \"}\n            </p>\n          </div>\n          <div className=\"contact-form__bottom\">\n            <a\n              className=\"btn btn--contact\"\n              href=\"mailto:c.c.green@outlook.com?subject=Jobstasy - job search portfolio app\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Contact Me\n              <svg\n                width=\"24\"\n                height=\"18\"\n                viewBox=\"0 0 24 18\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M0.50114 1.46044C3.79505 4.25002 9.57483 9.15773 11.2736 10.688C11.5016 10.8945 11.7462 10.9995 12.0001 10.9995C12.2535 10.9995 12.4977 10.8955 12.7253 10.6899C14.4255 9.1582 20.2052 4.25002 23.4992 1.46044C23.7043 1.28709 23.7355 0.982406 23.5695 0.770484C23.1857 0.280781 22.6134 0 22.0001 0H2.00016C1.38689 0 0.814593 0.280781 0.430828 0.770531C0.264796 0.982406 0.296062 1.28709 0.50114 1.46044Z\"\n                  fill=\"white\"\n                />\n                <path\n                  d=\"M23.71 2.9724C23.5327 2.8899 23.3242 2.91868 23.1768 3.04468C19.5239 6.14133 14.8618 10.1106 13.395 11.4323C12.5717 12.1755 11.4292 12.1755 10.604 11.4314C9.0405 10.0227 3.80512 5.57199 0.823219 3.04463C0.674766 2.91863 0.465797 2.89083 0.290016 2.97235C0.113297 3.05443 0 3.23119 0 3.426V16.0002C0 17.1033 0.896953 18.0002 2.00002 18.0002H22C23.103 18.0002 24 17.1033 24 16.0002V3.426C24 3.23119 23.8867 3.05396 23.71 2.9724Z\"\n                  fill=\"white\"\n                />\n              </svg>\n            </a>\n          </div>\n        </div>\n      </>\n    );\n  }\n  toggleFormOpen = () => {\n    this.state.formOpen\n      ? this.setState({ formOpen: false })\n      : this.setState({ formOpen: true });\n  };\n}\n\nexport default Contact;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobList.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Filters.js",["96"],"import React from \"react\";\nimport \"./main.scss\";\nimport \"./Filters.scss\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst muiTheme = createMuiTheme({\n  overrides: {\n    MuiSlider: {\n      root: {\n        width: \"95%\",\n        display: \"flex\",\n        margin: \"0 auto\",\n      },\n      markLabel: {\n        marginTop: \"10px\",\n        marginRight: \"10px\",\n      },\n      thumb: {\n        color: \"white\",\n        border: \"solid #444cf4  1px\",\n        stroke: \"#444cf4\",\n        height: \"30px\",\n        width: \"30px\",\n        transform: \"translate(-10px, -10px)\",\n      },\n      track: {\n        color: \"#444cf4\",\n      },\n      rail: {\n        color: \"#444cf4\",\n      },\n    },\n  },\n});\n\nconst marks = [\n  {\n    value: 0,\n    label: \"£0\",\n  },\n  {\n    value: 80000,\n    label: \"£80k\",\n  },\n];\n\nclass Filters extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      filtersOpen: false,\n      inputSort: \"most recent\",\n      inputSalaryValue: [0, 80000],\n      inputCompanyTag: \"\",\n      inputFullTimeOnly: false,\n      companyTags: [],\n      jobs: [],\n      filteredJobs: [],\n    };\n  }\n  render() {\n    const slider = document.getElementById(\"slider\");\n    return (\n      <>\n        <div className=\"list-info\" style={{ marginTop: this.props.marginTop }}>\n          <div className=\"filter-container\">\n            <div\n              className=\"filter-container__filters\"\n              onClick={() => {\n                this.toggleFilters();\n                this.toggleNoScroll();\n              }}\n            >\n              {/* <img\n              className=\"filters__img\"\n              src=\"https://svgshare.com/i/SxK.svg\"\n              alt=\"filter\"\n            /> */}\n              <svg\n                width=\"16\"\n                height=\"16\"\n                viewBox=\"0 0 16 16\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <g clip-path=\"url(#clip0)\">\n                  <path\n                    d=\"M15.4055 0H0.65625C0.311035 0 0.03125 0.279785 0.03125 0.625C0.03125 2.36548 0.777344 4.0271 2.07825 5.18347L4.81543 7.61634C5.29004 8.03821 5.56226 8.64441 5.56226 9.27955V15.3743C5.56226 15.8723 6.1189 16.1709 6.53382 15.8942L10.2212 13.436C10.395 13.3201 10.4995 13.125 10.4995 12.916V9.27955C10.4995 8.64441 10.7717 8.03821 11.2463 7.61634L13.9834 5.18347C15.2843 4.0271 16.0304 2.36548 16.0304 0.625C16.0304 0.279785 15.7506 0 15.4055 0ZM13.153 4.24915L10.4159 6.68213C9.67469 7.34107 9.24951 8.28772 9.24951 9.27942V12.5815L6.81214 14.2064V9.27955C6.81214 8.28772 6.38697 7.34107 5.64575 6.68213L2.90869 4.24927C2.03149 3.46936 1.47156 2.40076 1.32166 1.24988H14.74C14.5901 2.40076 14.0303 3.46936 13.153 4.24915Z\"\n                    fill=\"white\"\n                  />\n                </g>\n                <defs>\n                  <clipPath id=\"clip0\">\n                    <rect width=\"16\" height=\"16\" fill=\"white\" />\n                  </clipPath>\n                </defs>\n              </svg>\n\n              <p className=\"filter-container__filters__text\">Filters</p>\n            </div>\n            <div\n              className={\n                this.checkFiltersDefault()\n                  ? \"filter-container__clear\"\n                  : \"filter-container__clear visible\"\n              }\n              onClick={async () => {\n                await this.clearFilters();\n                this.props.updateFilterState([\n                  this.state.inputSort,\n                  this.state.inputSalaryValue,\n                  this.state.inputFullTimeOnly,\n                  this.state.companyTags,\n                ]);\n              }}\n            >\n              Clear Filters\n            </div>\n          </div>\n          <p className=\"job-number\">\n            {this.props.jobNumber +\n              (this.props.jobNumber === 1 ? \" job\" : \" jobs\")}\n          </p>\n        </div>\n        <div\n          className={\n            this.state.filtersOpen ? \"filter-overlay visible\" : \"filter-overlay\"\n          }\n        >\n          <div className=\"filter-overlay__title\">\n            <svg\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"filter-overlay__title__close\"\n              onClick={() => {\n                this.toggleFilters();\n                this.toggleNoScroll();\n              }}\n            >\n              <path\n                d=\"M4.90857 3.51569L20.4649 19.072C20.8552 19.4624 20.8552 20.0959 20.4649 20.4863C20.0746 20.8766 19.441 20.8766 19.0507 20.4863L3.49436 4.9299C3.10403 4.53958 3.10403 3.90601 3.49435 3.51569C3.88468 3.12537 4.51824 3.12537 4.90857 3.51569Z\"\n                fill=\"#404668\"\n              />\n              <path\n                d=\"M20.6777 5.12146L5.12132 20.6778C4.731 21.0681 4.09743 21.0681 3.70711 20.6778C3.31678 20.2875 3.31678 19.6539 3.70711 19.2636L19.2635 3.70725C19.6538 3.31693 20.2873 3.31693 20.6777 3.70725C21.068 4.09757 21.068 4.73114 20.6777 5.12146Z\"\n                fill=\"#404668\"\n              />\n            </svg>\n            <h1>Filters</h1>\n          </div>\n          <div className=\"filter-overlay__body\">\n            <div className=\"filter-overlay__body__section\">\n              <form action=\"\" className=\"filter-overlay__body__section__sort\">\n                <h2>Sort by </h2>\n                <select\n                  name=\"sortOptions\"\n                  id=\"sortOptions\"\n                  value={this.state.inputSort}\n                  onChange={this.handleChangeSort}\n                >\n                  <option value=\"most recent\">most recent</option>\n                  <option value=\"salary (high to low)\">\n                    salary (high to low)\n                  </option>\n                  <option value=\"salary (low to high)\">\n                    salary (low to high)\n                  </option>\n                </select>\n              </form>\n            </div>\n            <hr />\n            <div className=\"filter-overlay__body__section\">\n              <h2>Company</h2>\n              <div className=\"filter-overlay__body__section__area\">\n                <svg\n                  width=\"18\"\n                  height=\"18\"\n                  viewBox=\"0 0 18 18\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M7.6875 2.25C4.69111 2.25 2.25 4.69112 2.25 7.6875C2.25 10.6839 4.69111 13.125 7.6875 13.125C8.98363 13.125 10.1751 12.6671 11.1108 11.9062L14.7898 15.5852C14.8416 15.6392 14.9037 15.6823 14.9724 15.712C15.0411 15.7417 15.115 15.7574 15.1899 15.7581C15.2647 15.7589 15.3389 15.7447 15.4082 15.7164C15.4775 15.6881 15.5405 15.6463 15.5934 15.5934C15.6463 15.5405 15.6881 15.4775 15.7164 15.4082C15.7447 15.3389 15.7589 15.2647 15.7581 15.1899C15.7574 15.115 15.7417 15.0411 15.712 14.9724C15.6823 14.9037 15.6392 14.8416 15.5852 14.7898L11.9063 11.1108C12.6671 10.1751 13.125 8.98363 13.125 7.6875C13.125 4.69112 10.6839 2.25 7.6875 2.25ZM7.6875 3.375C10.0759 3.375 12 5.29911 12 7.6875C12 8.85098 11.5411 9.90214 10.7966 10.6765C10.7507 10.7102 10.7102 10.7507 10.6765 10.7966C9.90214 11.5411 8.85098 12 7.6875 12C5.29911 12 3.375 10.0759 3.375 7.6875C3.375 5.29911 5.29911 3.375 7.6875 3.375Z\"\n                    fill=\"#A0AEC0\"\n                  />\n                </svg>\n                <input\n                  id=\"input-add-company-tag\"\n                  type=\"text\"\n                  placeholder=\"Search by company\"\n                  onKeyUp={(e) => this.handleUserInput(e)}\n                />\n              </div>\n              <ul className=\"filter-overlay__body__section__tags\">\n                {this.state.companyTags.map((company, i) => {\n                  return (\n                    <li key={i} onClick={() => this.removeCompanyTag(i)}>\n                      {company}\n                      <svg\n                        width=\"8\"\n                        height=\"8\"\n                        viewBox=\"0 0 8 8\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <g clip-path=\"url(#clip0)\">\n                          <path\n                            d=\"M1.63619 1.1719L6.82164 6.35735C6.95175 6.48745 6.95175 6.69864 6.82164 6.82875C6.69153 6.95886 6.48034 6.95886 6.35024 6.82875L1.16478 1.6433C1.03468 1.51319 1.03468 1.302 1.16478 1.1719C1.29489 1.04179 1.50608 1.04179 1.63619 1.1719Z\"\n                            fill=\"#4449B0\"\n                          />\n                          <path\n                            d=\"M6.89256 1.7065L1.70711 6.89195C1.577 7.02206 1.36581 7.02206 1.2357 6.89195C1.10559 6.76184 1.10559 6.55066 1.2357 6.42055L6.42115 1.2351C6.55126 1.10499 6.76245 1.10499 6.89256 1.2351C7.02267 1.36521 7.02267 1.5764 6.89256 1.7065Z\"\n                            fill=\"#4449B0\"\n                          />\n                        </g>\n                        <defs>\n                          <clipPath id=\"clip0\">\n                            <rect\n                              width=\"8\"\n                              height=\"8\"\n                              fill=\"white\"\n                              transform=\"translate(0 8) rotate(-90)\"\n                            />\n                          </clipPath>\n                        </defs>\n                      </svg>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <hr />\n            <div className=\"filter-overlay__body__section\">\n              <h2>Salary</h2>\n              <ThemeProvider theme={muiTheme}>\n                <Slider\n                  value={this.state.inputSalaryValue}\n                  onChange={this.handleChangeSlider}\n                  valueLabelDisplay=\"auto\"\n                  valueLabelFormat={(x) =>\n                    x !== 0 ? Math.round(x / 1000).toString() + \"k\" : 0\n                  }\n                  aria-labelledby=\"range-slider\"\n                  color=\"primary\"\n                  marks={marks}\n                  min={0}\n                  max={80000}\n                  step={5000}\n                />\n              </ThemeProvider>\n            </div>\n            <hr />\n            <div className=\"filter-overlay__body__section filter-overlay__body__section__type\">\n              <h2>Type of work</h2>\n              <form action=\"\">\n                <input\n                  type=\"checkbox\"\n                  id=\"full-time-only\"\n                  checked={this.state.inputFullTimeOnly}\n                  onChange={this.handleUserCheckbox}\n                />\n                <label htmlFor=\"full-time-only\">Full time only</label>\n              </form>\n            </div>\n          </div>\n          <div className=\"filter-overlay__submit\">\n            <button\n              className=\"btn btn--clear-filter\"\n              onClick={this.clearFilters}\n            >\n              Clear\n            </button>\n            <button\n              className=\"btn btn--apply-filter\"\n              onClick={this.applyFilters}\n            >\n              Confirm\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  }\n  handleChangeSlider = (e, val) => {\n    this.setState({ inputSalaryValue: [...val] });\n  };\n  handleChangeSort = (e) => {\n    this.setState({ inputSort: e.target.value });\n  };\n  handleUserInput = (e) => {\n    this.setState({ inputCompanyTag: e.target.value });\n    e.keyCode === 13\n      ? this.addCompanyTag()\n      : this.setState({ inputCompanyTag: e.target.value });\n  };\n  checkFiltersDefault = () => {\n    return (\n      this.state.inputSort === \"most recent\" &&\n      JSON.stringify(this.state.inputSalaryValue) ===\n        JSON.stringify([0, 80000]) &&\n      this.state.inputFullTimeOnly === false &&\n      JSON.stringify(this.state.companyTags) === JSON.stringify([])\n    );\n  };\n  addCompanyTag = () => {\n    document.getElementById(\"input-add-company-tag\").value = \"\";\n    let updatedCompanyTags = [...this.state.companyTags];\n    if (this.tagValid(this.state.inputCompanyTag)) {\n      updatedCompanyTags.push(this.state.inputCompanyTag);\n      this.setState({\n        inputCompanyTag: \"\",\n        companyTags: [...updatedCompanyTags],\n      });\n    }\n  };\n  tagValid = (txt) => txt && txt.replace(/\\s/g, \"\").length;\n  handleUserCheckbox = (e) => {\n    this.setState({ inputFullTimeOnly: e.target.checked });\n  };\n  toggleFilters = () => {\n    this.state.filtersOpen\n      ? this.setState({ filtersOpen: false })\n      : this.setState({ filtersOpen: true });\n  };\n  toggleNoScroll = () => {\n    const body = document.body;\n    !this.state.filtersOpen\n      ? body.classList.add(\"no-scroll\")\n      : body.classList.remove(\"no-scroll\");\n  };\n  removeCompanyTag = (i) => {\n    let updatedCompanyTags = [...this.state.companyTags];\n    updatedCompanyTags.splice(i, 1);\n    this.setState({ companyTags: [...updatedCompanyTags] });\n  };\n  clearFilters = () => {\n    this.setState({\n      inputSort: \"most recent\",\n      inputSalaryValue: [0, 80000],\n      inputCompanyTag: \"\",\n      inputFullTimeOnly: false,\n      companyTags: [],\n    });\n  };\n  applyFilters = () => {\n    this.toggleFilters();\n    this.toggleNoScroll();\n    this.props.updateFilterState([\n      this.state.inputSort,\n      this.state.inputSalaryValue,\n      this.state.inputFullTimeOnly,\n      this.state.companyTags,\n    ]);\n  };\n}\n\nexport default Filters;\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/SearchField.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/components/JobCard.js",[],"/Users/camcgreen/Documents/web-dev/jobstasy/src/utilities/helper.js",["97","98"],"export const convertSalary = (salary) => {\n  //55000 (number)\n  //55k (string)\n  return (salary / 1000).toString() + \"k\";\n};\n\nexport const generateRandomString = (length) => {\n  const chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  let result = \"\";\n  for (let i = length; i > 0; --i)\n    result += chars[Math.round(Math.random() * (chars.length - 1))];\n  return result;\n};\n\nexport const disableRightMiddleClick = () => {\n  document.addEventListener(\"contextmenu\", (e) => {\n    e.preventDefault();\n  });\n  window.addEventListener(\"auxclick\", (event) => {\n    if (event.button === 1) {\n      event.preventDefault();\n    }\n  });\n};\n\nexport const getRandom = (seed) => {\n  const x = Math.sin(seed++) * 10000;\n  return x - Math.floor(x);\n};\n\nexport const convertJobIdToSeed = (id) => {\n  let result = 0;\n  id.split(\"\").forEach((char) => (result += char.charCodeAt(0)));\n  return result;\n};\n\nexport const convertToSalary = (random) => {\n  return Math.floor(45 + random * 15) * 1000;\n};\n\nexport const urlRegex = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))/i;\n\nexport const sortJobs = (jobs, sortBy) => {\n  switch (sortBy) {\n    case \"most recent\":\n      return jobs.sort(\n        (a, b) => Date.parse(b.created_at) - Date.parse(a.created_at)\n      );\n    case \"salary (high to low)\":\n      return jobs.sort((a, b) => Number(b.salary_max) - Number(a.salary_max));\n    case \"salary (low to high)\":\n      return jobs.sort((a, b) => Number(a.salary_min) - Number(b.salary_min));\n    default:\n      return [];\n  }\n};\n\nexport const filterJobsByCompany = (jobs, searchTerms) => {\n  let formattedSearchTerms = [...searchTerms];\n  for (let i = 0; i < formattedSearchTerms.length; i++) {\n    formattedSearchTerms[i] = formattedSearchTerms[i].split(\" \");\n  }\n  const flattenedSearchTerms = formattedSearchTerms.flat();\n  return jobs.filter((job) => {\n    const keywords = job.company.toLowerCase().split(\" \");\n    let matchFound = false;\n    // nested loop mxn complexity, but m and n will always be very low\n    flattenedSearchTerms.forEach((searchTerm) => {\n      keywords.forEach((keyword) => {\n        if (keyword === searchTerm.toLowerCase()) {\n          matchFound = true;\n          return;\n        }\n      });\n    });\n    return matchFound;\n  });\n};\n\nexport const filterJobsBySalary = (jobs, userMin, userMax) => {\n  return jobs.filter((job) => {\n    return (\n      (job.salary_max >= userMin || job.salary_min >= userMin) &&\n      (job.salary_min <= userMax || job.salary_max <= userMax)\n    );\n  });\n};\n\nexport const filterJobsByFullTime = (jobs) => {\n  return jobs.filter((job) => job.type === \"Full Time\");\n};\n","/Users/camcgreen/Documents/web-dev/jobstasy/src/components/Pagination.js",["99","100","101","102","103","104"],"import React from \"react\";\nimport \"./main.scss\";\nimport \"./Pagination.scss\";\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let pageNumbers = [];\n    for (\n      let i = 1;\n      i <= Math.ceil(this.props.totalJobs / this.props.jobsPerPage);\n      i++\n    ) {\n      pageNumbers.push(i);\n    }\n    return (\n      <nav className=\"nav-pagination\">\n        <ul className=\"pagination\">\n          <li\n            key={-1}\n            className=\"page-item\"\n            onClick={() => this.props.paginate(1)}\n            className=\"page-link page-link--arrow-2\"\n          >\n            {\"<<\"}\n          </li>\n          <li\n            key={0}\n            className=\"page-item\"\n            onClick={() =>\n              this.props.currentPage - 1 > 0 &&\n              this.props.paginate(this.props.currentPage - 1)\n            }\n            className=\"page-link page-link--arrow-1\"\n          >\n            {\"<\"}\n          </li>\n          {pageNumbers.map((number) => (\n            <li\n              key={number}\n              className=\"page-item\"\n              onClick={() => this.props.paginate(number)}\n              className={\n                this.props.currentPage === number\n                  ? \"page-link page-selected\"\n                  : \"page-link\"\n              }\n            >\n              {number}\n            </li>\n          ))}\n          <li\n            key={pageNumbers + 1}\n            className=\"page-item\"\n            onClick={() =>\n              this.props.currentPage + 1 < pageNumbers.length + 1 &&\n              this.props.paginate(this.props.currentPage + 1)\n            }\n            className=\"page-link page-link--arrow-1\"\n          >\n            {\">\"}\n          </li>\n          <li\n            key={pageNumbers + 2}\n            className=\"page-item\"\n            onClick={() => this.props.paginate(pageNumbers.length)}\n            className=\"page-link page-link--arrow-2\"\n          >\n            {\">>\"}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Pagination;\n",{"ruleId":"105","severity":1,"message":"106","line":7,"column":3,"nodeType":"107","messageId":"108","endLine":7,"endColumn":9},{"ruleId":"105","severity":1,"message":"109","line":10,"column":8,"nodeType":"107","messageId":"108","endLine":10,"endColumn":11},{"ruleId":"105","severity":1,"message":"110","line":18,"column":8,"nodeType":"107","messageId":"108","endLine":18,"endColumn":14},{"ruleId":"105","severity":1,"message":"111","line":19,"column":8,"nodeType":"107","messageId":"108","endLine":19,"endColumn":14},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"105","severity":1,"message":"116","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":12},{"ruleId":"117","severity":1,"message":"118","line":105,"column":7,"nodeType":"119","messageId":"120","endLine":121,"endColumn":8},{"ruleId":"121","severity":1,"message":"122","line":178,"column":82,"nodeType":"123","messageId":"124","endLine":178,"endColumn":83,"suggestions":"125"},{"ruleId":"121","severity":1,"message":"126","line":178,"column":198,"nodeType":"123","messageId":"124","endLine":178,"endColumn":199,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":223,"column":32,"nodeType":"130","messageId":"131","endLine":223,"endColumn":34},{"ruleId":"128","severity":1,"message":"132","line":226,"column":11,"nodeType":"133","messageId":"134","endLine":226,"endColumn":18},{"ruleId":"105","severity":1,"message":"135","line":1,"column":10,"nodeType":"107","messageId":"108","endLine":1,"endColumn":14},{"ruleId":"105","severity":1,"message":"136","line":64,"column":11,"nodeType":"107","messageId":"108","endLine":64,"endColumn":17},{"ruleId":"121","severity":1,"message":"122","line":41,"column":88,"nodeType":"123","messageId":"124","endLine":41,"endColumn":89,"suggestions":"137"},{"ruleId":"121","severity":1,"message":"126","line":41,"column":204,"nodeType":"123","messageId":"124","endLine":41,"endColumn":205,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":6,"column":3,"nodeType":"141","messageId":"142","endLine":8,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":26,"column":13,"nodeType":"145","endLine":26,"endColumn":53},{"ruleId":"143","severity":1,"message":"144","line":37,"column":13,"nodeType":"145","endLine":37,"endColumn":53},{"ruleId":"143","severity":1,"message":"144","line":46,"column":15,"nodeType":"145","endLine":50,"endColumn":16},{"ruleId":"143","severity":1,"message":"144","line":62,"column":13,"nodeType":"145","endLine":62,"endColumn":53},{"ruleId":"143","severity":1,"message":"144","line":70,"column":13,"nodeType":"145","endLine":70,"endColumn":53},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'App' is defined but never used.","'Navbar' is defined but never used.","'Footer' is defined but never used.","no-native-reassign",["146"],"no-negated-in-lhs",["147"],"'logo' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["148","149"],"Unnecessary escape character: \\[.",["150","151"],"array-callback-return","Array.prototype.every() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.every() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'Link' is defined but never used.","'slider' is assigned a value but never used.",["152","153"],["154","155"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"messageId":"156","fix":"157","desc":"158"},{"messageId":"159","fix":"160","desc":"161"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"159","fix":"163","desc":"161"},{"messageId":"156","fix":"164","desc":"158"},{"messageId":"159","fix":"165","desc":"161"},{"messageId":"156","fix":"166","desc":"158"},{"messageId":"159","fix":"167","desc":"161"},"removeEscape",{"range":"168","text":"169"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"170","text":"171"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"172","text":"169"},{"range":"173","text":"171"},{"range":"174","text":"169"},{"range":"175","text":"171"},{"range":"176","text":"169"},{"range":"177","text":"171"},[7516,7517],"",[7516,7516],"\\",[7632,7633],[7632,7632],[1070,1071],[1070,1070],[1186,1187],[1186,1186]]